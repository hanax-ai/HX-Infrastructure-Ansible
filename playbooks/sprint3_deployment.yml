---

---
# Sprint 3: Operational Excellence & Advanced Features Deployment Playbook
- name: Deploy Sprint 3 - Operational Excellence & Advanced Features
  hosts: all
  become: true
  gather_facts: true

  vars:
    sprint_version: "3.0"
    deployment_timestamp: "{{ ansible_date_time.epoch }}"
    sprint3_features:
      - "production_deployment_automation"
      - "advanced_backup_disaster_recovery"
      - "performance_optimization_autoscaling"
      - "enterprise_integration"
      - "operational_excellence_framework"

  pre_tasks:
    - name: Display Sprint 3 deployment information
      ansible.builtin.debug:
        msg:
          - "=== SPRINT 3 DEPLOYMENT - OPERATIONAL EXCELLENCE ==="
          - "Sprint Version: {{ sprint_version }}"
          - "Deployment Timestamp: {{ deployment_timestamp }}"
          - "Target Host: {{ inventory_hostname }}"
          - "Features: {{ sprint3_features | join(', ') }}"
          - "=========================================="

    - name: Validate prerequisites
      ansible.builtin.assert:
        that:
          - ansible_version.full is version('2.9', '>=')
          - ansible_os_family in ['RedHat', 'Debian']
        fail_msg: "Prerequisites not met for Sprint 3 deployment"
        success_msg: "Prerequisites validated successfully"

    - name: Create Sprint 3 directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /opt/sprint3
        - /opt/sprint3/logs
        - /opt/sprint3/configs
        - /opt/sprint3/backups

  tasks:
    # Production Deployment Automation
    - name: Deploy Blue-Green Deployment Capability
      include_role:
        name: blue_green_deployment
      vars:
        application_name: "sprint3-demo"
        deployment_strategy: "blue_green"
      tags: [production_deployment, blue_green]

    # Advanced Backup and Disaster Recovery
    - name: Configure Advanced Backup and DR
      include_role:
        name: disaster_recovery
      vars:
        dr_mode: "preparation"
        backup_retention_days: 30
        enable_cross_region_replication: true
      tags: [backup, disaster_recovery]

    # Performance Optimization and Auto-scaling
    - name: Setup Performance Optimization
      include_role:
        name: performance_optimization
      vars:
        enable_performance_monitoring: true
        enable_auto_scaling: true
        optimization_level: "enterprise"
      tags: [performance, auto_scaling]

    # Enterprise Integration
    - name: Configure Enterprise Integration
      include_role:
        name: enterprise_integration
      vars:
        enable_iam_integration: true
        enable_compliance_audit: true
        enable_enterprise_logging: true
      tags: [enterprise, integration]

    # Operational Excellence Framework
    - name: Deploy Operational Excellence Framework
      include_role:
        name: operational_excellence
      vars:
        enable_operational_metrics: true
        enable_continuous_improvement: true
        enable_operational_dashboards: true
        enable_incident_management: true
      tags: [operational_excellence, framework]

  post_tasks:
    - name: Validate Sprint 3 deployment
      ansible.builtin.shell: |
        echo "Validating Sprint 3 deployment..."

        # Check if all services are running
        systemctl is-active --quiet rsyslog && echo "✓ Logging service active"
        systemctl is-active --quiet nginx && echo "✓ Web service active"

        # Check if monitoring is operational
        curl -s http://localhost:9090/api/v1/query?query=up > /dev/null && echo "✓ Monitoring operational"

        # Check if directories were created
        [ -d "/opt/operational" ] && echo "✓ Operational directories created"
        [ -d "/opt/performance" ] && echo "✓ Performance directories created"

        echo "Sprint 3 validation completed"
      register: sprint3_validation
      changed_when: false

    - name: Generate Sprint 3 deployment report
      ansible.builtin.template:
        src: sprint3_deployment_report.j2
        dest: "/opt/sprint3/deployment_report_{{ deployment_timestamp }}.html"
        mode: '0644'
      vars:
        deployment_status: "{{ 'SUCCESS' if sprint3_validation.rc == 0 else 'PARTIAL' }}"
        validation_output: "{{ sprint3_validation.stdout_lines }}"

    - name: Log Sprint 3 deployment completion
      ansible.builtin.lineinfile:
        path: /var/log/sprint3_deployment.log
        line: "{{ ansible_date_time.iso8601 }} - Sprint 3 deployment completed on {{ inventory_hostname }} - Status: {{ 'SUCCESS' if sprint3_validation.rc == 0 else 'PARTIAL' }}"
        create: true

    - name: Display Sprint 3 deployment summary
      ansible.builtin.debug:
        msg:
          - "=== SPRINT 3 DEPLOYMENT SUMMARY ==="
          - "Status: {{ 'SUCCESS' if sprint3_validation.rc == 0 else 'PARTIAL' }}"
          - "Host: {{ inventory_hostname }}"
          - "Timestamp: {{ ansible_date_time.iso8601 }}"
          - "Features Deployed:"
          - "  ✓ Production Deployment Automation (Blue-Green)"
          - "  ✓ Advanced Backup and Disaster Recovery"
          - "  ✓ Performance Optimization and Auto-scaling"
          - "  ✓ Enterprise Integration (IAM, Compliance, Logging)"
          - "  ✓ Operational Excellence Framework"
          - "Report: /opt/sprint3/deployment_report_{{ deployment_timestamp }}.html"
          - "Next: Review Sprint 3 documentation and begin Sprint 4 planning"
          - "=================================="

  handlers:
    - name: restart rsyslog
      ansible.builtin.systemd:
        name: rsyslog
        state: restarted

    - name: restart nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true
