---
- name: "SPRINT 4: Final Production Deployment & Optimization"
  hosts: all
  become: true
  gather_facts: true
  vars:
    sprint_version: "4.0.0"
    deployment_timestamp: "{{ ansible_date_time.epoch}}"

  pre_tasks:
    - name: Display Sprint 4 banner
      debug:
        msg: |
          ╔══════════════════════════════════════════════════════════════╗
          ║                    SPRINT 4 EXECUTION                       ║
          ║            Final Production Deployment & Optimization        ║
          ║                                                              ║
          ║  🚀 AI-Driven Deployment Orchestration                      ║
          ║  🧠 Intelligent Monitoring & Predictive Scaling             ║
          ║  🔧 Self-Healing Infrastructure                             ║
          ║  ☁️  Multi-Cloud Strategy Implementation                     ║
          ║  📈 Continuous Improvement Activation                       ║
          ║  ✅ Final Validation & Certification                        ║
          ╚══════════════════════════════════════════════════════════════╝

    - name: Validate prerequisites
      assert:
        that:
          - ansible_version.full is version('2.9', '>=')
          - ansible_python_version is version('3.8', '>=')
        fail_msg: "Prerequisites not met. Ansible 2.9+ and Python 3.8+ required."

    - name: Create Sprint 4 deployment log
      copy:
        content: |
          Sprint 4 Deployment Log
          ======================
          Start Time: {{ ansible_date_time.iso8601}}
          Version: {{ sprint_version}}
          Host: {{ inventory_hostname}}
          Environment: {{ environment | default('production')}}
        dest: /var/log/sprint4-deployment.log
        mode: '0644'

  roles:
    # OBJECTIVE 1: AI Deployment Orchestration
    - role: ai_deployment_orchestrator
      tags: ['ai-orchestration', 'deployment']
      when: ai_orchestrator.enabled | default(true)

    # OBJECTIVE 2: Intelligent Monitoring
    - role: intelligent_monitoring
      tags: ['intelligent-monitoring', 'ai-monitoring']
      when: intelligent_monitoring.enabled | default(true)

    # OBJECTIVE 3: Self-Healing Infrastructure
    - role: self_healing_infrastructure
      tags: ['self-healing', 'automation']
      when: self_healing.enabled | default(true)

    # OBJECTIVE 4: Multi-Cloud Orchestration
    - role: multi_cloud_orchestrator
      tags: ['multi-cloud', 'orchestration']
      when: multi_cloud.enabled | default(true)

    # OBJECTIVE 5: Continuous Improvement
    - role: continuous_improvement
      tags: ['continuous-improvement', 'optimization']
      when: continuous_improvement.enabled | default(true)

  post_tasks:
    - name: Run comprehensive AI/ML model training
      command: /opt/hx/venv/bin/python /opt/hx/scripts/ai-ml/training/comprehensive_model_training.py
      register: model_training_result
      changed_when: model_training_result.rc == 0
      tags: ['ai-training']

    - name: Validate all services are running
      systemd:
        name: "{{ item}}"
        state: started
      loop:
        - hx-ai-orchestrator
        - hx-anomaly-detector
        - hx-predictive-scaler
        - hx-cost-optimizer
        - hx-monitoring-dashboard
        - hx-self-healing
        - hx-multi-cloud-orchestrator
        - hx-continuous-improvement
      tags: ['validation']

    - name: Perform health checks
      uri:
        url: "http://localhost:{{ item.port}}/health"
        method: GET
        timeout: 10
      register: health_checks
      loop:
        - {"service": "ai-orchestrator", "port": 8080}
        - {"service": "anomaly-detector", "port": 8081}
        - {"service": "predictive-scaler", "port": 8082}
        - {"service": "cost-optimizer", "port": 8083}
        - {"service": "monitoring-dashboard", "port": 8084}
        - {"service": "self-healing", "port": 8085}
        - {"service": "multi-cloud-orchestrator", "port": 8086}
        - {"service": "continuous-improvement", "port": 8087}
      tags: ['validation']

    - name: Generate Sprint 4 completion report
      template:
        src: sprint4_completion_report.md.j2
        dest: /opt/hx/reports/sprint4-completion-{{ ansible_date_time.date}}.md
        mode: '0644'
      tags: ['reporting']

    - name: Update deployment log with completion
      lineinfile:
        path: /var/log/sprint4-deployment.log
        line: |
          End Time: {{ ansible_date_time.iso8601}}
          Status: SUCCESS
          Services Deployed: 8
          AI Models Trained: 5
        create: true
      tags: ['logging']

    - name: Display Sprint 4 completion summary
      debug:
        msg: |
          ╔══════════════════════════════════════════════════════════════╗
          ║                 SPRINT 4 COMPLETED SUCCESSFULLY             ║
          ║                                                              ║
          ║  ✅ AI Deployment Orchestrator: OPERATIONAL                 ║
          ║  ✅ Intelligent Monitoring: OPERATIONAL                     ║
          ║  ✅ Self-Healing Infrastructure: OPERATIONAL                ║
          ║  ✅ Multi-Cloud Orchestrator: OPERATIONAL                   ║
          ║  ✅ Continuous Improvement: OPERATIONAL                     ║
          ║  ✅ AI/ML Models: TRAINED & DEPLOYED                        ║
          ║                                                              ║
          ║  🎉 PLATFORM TRANSFORMATION COMPLETE!                       ║
          ║                                                              ║
          ║  Next Steps:                                                 ║
          ║  • Review completion report                                  ║
          ║  • Validate production readiness                            ║
          ║  • Begin operational handover                               ║
          ╚══════════════════════════════════════════════════════════════╝
      tags: ['summary']
