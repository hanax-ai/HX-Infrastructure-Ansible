
#!/bin/bash
# PostgreSQL Backup Script
# Generated by Ansible - HX Infrastructure

set -euo pipefail

# Configuration
BACKUP_DIR="{{ hx_pg_backup_directory | default('/var/lib/postgresql/backups') }}"
RETENTION_DAYS="{{ hx_pg_backup_retention_days | default(7) }}"
DATABASES="{{ hx_pg_backup_databases | default(['all']) | join(' ') }}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="${BACKUP_DIR}/backup_${TIMESTAMP}.log"

# Ensure backup directory exists
mkdir -p "${BACKUP_DIR}"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${LOG_FILE}"
}

# Error handling
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Start backup process
log "Starting PostgreSQL backup process"

# Check if PostgreSQL is running
if ! systemctl is-active --quiet postgresql; then
    error_exit "PostgreSQL service is not running"
fi

# Backup function
backup_database() {
    local db_name="$1"
    local backup_file="${BACKUP_DIR}/${db_name}_${TIMESTAMP}.sql"
    
    log "Backing up database: ${db_name}"
    
    if [ "${db_name}" = "all" ]; then
        pg_dumpall -U postgres > "${backup_file}" || error_exit "Failed to backup all databases"
    else
        pg_dump -U postgres -d "${db_name}" > "${backup_file}" || error_exit "Failed to backup database ${db_name}"
    fi
    
    # Compress backup
    gzip "${backup_file}" || error_exit "Failed to compress backup ${backup_file}"
    
    log "Successfully backed up ${db_name} to ${backup_file}.gz"
}

# Perform backups
for db in ${DATABASES}; do
    backup_database "${db}"
done

# Cleanup old backups
log "Cleaning up backups older than ${RETENTION_DAYS} days"
find "${BACKUP_DIR}" -name "*.sql.gz" -type f -mtime +${RETENTION_DAYS} -delete || log "Warning: Failed to cleanup old backups"

# WAL archiving cleanup (if enabled)
{% if hx_pg_enable_wal_archiving | default(false) %}
WAL_ARCHIVE_DIR="{{ hx_pg_wal_archive_directory | default('/var/lib/postgresql/archive') }}"
if [ -d "${WAL_ARCHIVE_DIR}" ]; then
    log "Cleaning up WAL archives older than ${RETENTION_DAYS} days"
    find "${WAL_ARCHIVE_DIR}" -name "*.backup" -type f -mtime +${RETENTION_DAYS} -delete || log "Warning: Failed to cleanup old WAL archives"
fi
{% endif %}

# Generate backup report
BACKUP_SIZE=$(du -sh "${BACKUP_DIR}" | cut -f1)
BACKUP_COUNT=$(find "${BACKUP_DIR}" -name "*_${TIMESTAMP}.sql.gz" | wc -l)

log "Backup completed successfully"
log "Total backup size: ${BACKUP_SIZE}"
log "Number of backups created: ${BACKUP_COUNT}"

# Send notification (if configured)
{% if hx_pg_backup_notification_email is defined %}
echo "PostgreSQL backup completed successfully on $(hostname) at $(date)" | \
mail -s "PostgreSQL Backup Success - $(hostname)" "{{ hx_pg_backup_notification_email }}"
{% endif %}

log "Backup process finished"
