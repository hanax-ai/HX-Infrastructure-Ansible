
#!/bin/bash
# PostgreSQL Health Check Script
# Generated by Ansible - HX Infrastructure

set -euo pipefail

# Configuration
HEALTH_CHECK_DIR="{{ hx_pg_log_directory | default('/var/log/postgresql') }}"
HEALTH_REPORT="${HEALTH_CHECK_DIR}/health_check_$(date +%Y%m%d_%H%M%S).json"
WARNING_THRESHOLD="{{ hx_pg_health_warning_threshold | default(80) }}"
CRITICAL_THRESHOLD="{{ hx_pg_health_critical_threshold | default(95) }}"

# Ensure health check directory exists
mkdir -p "${HEALTH_CHECK_DIR}"

# Initialize health status
OVERALL_STATUS="OK"
WARNINGS=()
ERRORS=()

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Add warning
add_warning() {
    WARNINGS+=("$1")
    if [ "${OVERALL_STATUS}" = "OK" ]; then
        OVERALL_STATUS="WARNING"
    fi
    log "WARNING: $1"
}

# Add error
add_error() {
    ERRORS+=("$1")
    OVERALL_STATUS="CRITICAL"
    log "ERROR: $1"
}

# Check PostgreSQL service status
check_service_status() {
    log "Checking PostgreSQL service status..."
    
    if systemctl is-active --quiet postgresql; then
        log "PostgreSQL service is running"
        return 0
    else
        add_error "PostgreSQL service is not running"
        return 1
    fi
}

# Check database connectivity
check_connectivity() {
    log "Checking database connectivity..."
    
    if sudo -u postgres psql -c "SELECT 1;" > /dev/null 2>&1; then
        log "Database connectivity OK"
        return 0
    else
        add_error "Cannot connect to PostgreSQL database"
        return 1
    fi
}

# Check disk usage
check_disk_usage() {
    log "Checking disk usage..."
    
    local data_dir="{{ hx_pg_data_directory | default('/var/lib/postgresql/data') }}"
    local usage=$(df "${data_dir}" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ "${usage}" -ge "${CRITICAL_THRESHOLD}" ]; then
        add_error "Disk usage critical: ${usage}% (threshold: ${CRITICAL_THRESHOLD}%)"
    elif [ "${usage}" -ge "${WARNING_THRESHOLD}" ]; then
        add_warning "Disk usage high: ${usage}% (threshold: ${WARNING_THRESHOLD}%)"
    else
        log "Disk usage OK: ${usage}%"
    fi
    
    echo "${usage}"
}

# Check active connections
check_connections() {
    log "Checking active connections..."
    
    local max_connections="{{ hx_pg_max_connections | default(100) }}"
    local active_connections=$(sudo -u postgres psql -t -c "SELECT count(*) FROM pg_stat_activity WHERE state = 'active';" 2>/dev/null | xargs)
    
    if [ -z "${active_connections}" ]; then
        add_error "Cannot retrieve connection count"
        return 1
    fi
    
    local usage_percent=$((active_connections * 100 / max_connections))
    
    if [ "${usage_percent}" -ge "${CRITICAL_THRESHOLD}" ]; then
        add_error "Connection usage critical: ${active_connections}/${max_connections} (${usage_percent}%)"
    elif [ "${usage_percent}" -ge "${WARNING_THRESHOLD}" ]; then
        add_warning "Connection usage high: ${active_connections}/${max_connections} (${usage_percent}%)"
    else
        log "Connection usage OK: ${active_connections}/${max_connections} (${usage_percent}%)"
    fi
    
    echo "${active_connections}"
}

# Check replication status (if configured)
check_replication() {
    log "Checking replication status..."
    
    local replication_status=$(sudo -u postgres psql -t -c "SELECT state FROM pg_stat_replication;" 2>/dev/null | xargs)
    
    if [ -n "${replication_status}" ]; then
        log "Replication status: ${replication_status}"
        echo "${replication_status}"
    else
        log "No replication configured or no active replicas"
        echo "none"
    fi
}

# Check WAL archiving (if enabled)
check_wal_archiving() {
    log "Checking WAL archiving..."
    
    {% if hx_pg_enable_wal_archiving | default(false) %}
    local archive_status=$(sudo -u postgres psql -t -c "SELECT archived_count, failed_count FROM pg_stat_archiver;" 2>/dev/null)
    
    if [ -n "${archive_status}" ]; then
        local archived=$(echo "${archive_status}" | awk '{print $1}')
        local failed=$(echo "${archive_status}" | awk '{print $3}')
        
        if [ "${failed}" -gt 0 ]; then
            add_warning "WAL archiving has ${failed} failed attempts"
        else
            log "WAL archiving OK: ${archived} archived, ${failed} failed"
        fi
        
        echo "{\"archived\": ${archived}, \"failed\": ${failed}}"
    else
        add_error "Cannot retrieve WAL archiving status"
        echo "{\"archived\": 0, \"failed\": 0}"
    fi
    {% else %}
    log "WAL archiving not enabled"
    echo "{\"archived\": 0, \"failed\": 0}"
    {% endif %}
}

# Check database sizes
check_database_sizes() {
    log "Checking database sizes..."
    
    local db_sizes=$(sudo -u postgres psql -t -c "SELECT datname, pg_size_pretty(pg_database_size(datname)) FROM pg_database WHERE datistemplate = false;" 2>/dev/null)
    
    if [ -n "${db_sizes}" ]; then
        log "Database sizes retrieved successfully"
        echo "${db_sizes}" | jq -R -s 'split("\n") | map(select(length > 0)) | map(split("|")) | map({name: .[0] | ltrimstr(" ") | rtrimstr(" "), size: .[1] | ltrimstr(" ") | rtrimstr(" ")})'
    else
        add_error "Cannot retrieve database sizes"
        echo "[]"
    fi
}

# Main health check execution
main() {
    log "Starting PostgreSQL health check..."
    
    # Perform all checks
    SERVICE_STATUS=$(check_service_status && echo "running" || echo "stopped")
    CONNECTIVITY=$(check_connectivity && echo "ok" || echo "failed")
    DISK_USAGE=$(check_disk_usage)
    ACTIVE_CONNECTIONS=$(check_connections)
    REPLICATION_STATUS=$(check_replication)
    WAL_ARCHIVING=$(check_wal_archiving)
    DATABASE_SIZES=$(check_database_sizes)
    
    # Generate JSON report
    cat > "${HEALTH_REPORT}" << EOF
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "hostname": "$(hostname)",
  "overall_status": "${OVERALL_STATUS}",
  "checks": {
    "service_status": "${SERVICE_STATUS}",
    "connectivity": "${CONNECTIVITY}",
    "disk_usage_percent": ${DISK_USAGE},
    "active_connections": ${ACTIVE_CONNECTIONS},
    "replication_status": "${REPLICATION_STATUS}",
    "wal_archiving": ${WAL_ARCHIVING},
    "database_sizes": ${DATABASE_SIZES}
  },
  "warnings": [$(printf '"%s",' "${WARNINGS[@]}" | sed 's/,$//')]
  "errors": [$(printf '"%s",' "${ERRORS[@]}" | sed 's/,$//')]
}
EOF
    
    log "Health check completed. Status: ${OVERALL_STATUS}"
    log "Report saved to: ${HEALTH_REPORT}"
    
    # Exit with appropriate code
    case "${OVERALL_STATUS}" in
        "OK") exit 0 ;;
        "WARNING") exit 1 ;;
        "CRITICAL") exit 2 ;;
        *) exit 3 ;;
    esac
}

# Run main function
main "$@"
