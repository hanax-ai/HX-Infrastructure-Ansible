
#!/bin/bash
# Automated Rollback Script - Generated by Ansible Operational Safety
# Operation: {{ operation_name }}
# Generated: {{ ansible_date_time.iso8601 }}
# Target Host: {{ target_host }}
# Backup Path: {{ backup_path }}

set -euo pipefail

# Configuration
OPERATION_NAME="{{ operation_name }}"
BACKUP_PATH="{{ backup_path }}"
TARGET_HOST="{{ target_host }}"
LOG_FILE="/var/log/ansible-safety/rollback-$(date +%s).log"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Main rollback function
perform_rollback() {
    log "Starting rollback for operation: $OPERATION_NAME"
    log "Target host: $TARGET_HOST"
    log "Using backup: $BACKUP_PATH"
    
    if [[ ! -d "$BACKUP_PATH" ]]; then
        error_exit "Backup directory not found: $BACKUP_PATH"
    fi
    
    # Stop services if needed
    {% if safety_services_to_stop is defined %}
    log "Stopping services for rollback..."
    {% for service in safety_services_to_stop %}
    systemctl stop {{ service }} || log "Warning: Failed to stop {{ service }}"
    {% endfor %}
    {% endif %}
    
    # Restore from backup
    log "Restoring files from backup..."
    for backup_file in "$BACKUP_PATH"/*.tar.gz; do
        if [[ -f "$backup_file" ]]; then
            log "Restoring: $backup_file"
            tar -xzf "$backup_file" -C / || log "Warning: Failed to restore $backup_file"
        fi
    done
    
    # Restore database if exists
    if [[ -f "$BACKUP_PATH/database-"*.sql ]]; then
        log "Restoring database..."
        {% if safety_backup_database %}
        psql -h {{ db_host }} -U {{ db_user }} {{ db_name }} < "$BACKUP_PATH"/database-*.sql || log "Warning: Database restore failed"
        {% endif %}
    fi
    
    # Restart services
    {% if safety_services_to_stop is defined %}
    log "Restarting services..."
    {% for service in safety_services_to_stop %}
    systemctl start {{ service }} || log "Warning: Failed to start {{ service }}"
    {% endfor %}
    {% endif %}
    
    log "Rollback completed successfully"
}

# Confirmation prompt
echo "╔══════════════════════════════════════════════════════════════════════════════╗"
echo "║                           🔄 ROLLBACK CONFIRMATION 🔄                        ║"
echo "╠══════════════════════════════════════════════════════════════════════════════╣"
echo "║ Operation: $OPERATION_NAME"
echo "║ Target: $TARGET_HOST"
echo "║ Backup: $BACKUP_PATH"
echo "║"
echo "║ This will restore the system to its previous state."
echo "║ Type 'ROLLBACK_CONFIRMED' to proceed:"
echo "╚══════════════════════════════════════════════════════════════════════════════╝"

read -r confirmation
if [[ "$confirmation" != "ROLLBACK_CONFIRMED" ]]; then
    error_exit "Rollback aborted - confirmation not provided"
fi

# Execute rollback
perform_rollback

log "Rollback script completed successfully"
echo "✅ Rollback completed. Check log: $LOG_FILE"
