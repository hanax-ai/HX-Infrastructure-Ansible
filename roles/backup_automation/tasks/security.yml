---
# Backup automation security setup
- name: Create backup user group
  group:
    name: backup
    state: present
    system: true

- name: Create backup user
  user:
    name: backup
    group: backup
    system: true
    shell: /bin/bash
    home: /var/lib/backup
    create_home: true
    comment: "HX Backup Automation User"

- name: Set backup user password policy
  user:
    name: backup
    password_lock: true

- name: Create backup sudoers configuration
  template:
    src: backup-sudoers.j2
    dest: /etc/sudoers.d/backup
    mode: '0440'
    owner: root
    group: root
    validate: 'visudo -cf %s'

- name: Configure backup user SSH access
  authorized_key:
    user: backup
    key: "{{ item }}"
    state: present
  loop: "{{ backup_ssh_keys | default([]) }}"
  when: backup_ssh_keys is defined

- name: Create backup security directories
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ backup_security.directory_permissions }}"
  loop:
    - { path: "/etc/hx-backup", owner: "root", group: "root" }
    - { path: "/var/lib/backup/.ssh", owner: "backup", group: "backup" }
    - { path: "/var/lib/backup/scripts", owner: "backup", group: "backup" }

- name: Generate backup encryption key
  command: openssl rand -base64 32
  register: backup_encryption_key
  no_log: true
  when:
    - backup_automation.encryption.enabled
    - not ansible_check_mode

- name: Store backup encryption key
  copy:
    content: "{{ backup_encryption_key.stdout }}"
    dest: "{{ backup_automation.encryption.key_file }}"
    owner: backup
    group: backup
    mode: "{{ backup_security.file_permissions }}"
  no_log: true
  when:
    - backup_automation.encryption.enabled
    - backup_encryption_key is defined
    - not ansible_check_mode

- name: Create backup key rotation script
  template:
    src: rotate-backup-key.sh.j2
    dest: /var/lib/backup/scripts/rotate-backup-key.sh
    owner: backup
    group: backup
    mode: '0750'

- name: Configure SELinux contexts for backup directories
  sefcontext:
    target: "{{ item.target }}"
    setype: "{{ item.setype }}"
    state: present
  loop: "{{ backup_security.selinux_contexts | default([
    {'target': (backup_automation.base_directory + '(/.*)?'), 'setype': 'var_lib_t'},
    {'target': '/var/lib/backup(/.*)?', 'setype': 'var_lib_t'},
    {'target': '/etc/hx-backup(/.*)?', 'setype': 'etc_t'}
  ]) }}"
  when:
    - ansible_selinux.status == "enabled"
    - backup_security.selinux_contexts is defined

- name: Apply SELinux contexts
  command: restorecon -R {{ item }}
  loop:
    - "{{ backup_automation.base_directory }}"
    - "/var/lib/backup"
    - "/etc/hx-backup"
  when:
    - ansible_selinux.status == "enabled"
    - backup_security.selinux_contexts is defined

- name: Configure backup file permissions
  file:
    path: "{{ item }}"
    owner: "{{ backup_security.owner }}"
    group: "{{ backup_security.group }}"
    mode: "{{ backup_security.directory_permissions }}"
    state: directory
  loop:
    - "{{ backup_automation.base_directory }}"
    - "{{ backup_automation.temp_directory }}"
    - "{{ backup_automation.log_directory }}"

- name: Create backup access control script
  template:
    src: backup-access-control.sh.j2
    dest: /var/lib/backup/scripts/backup-access-control.sh
    owner: backup
    group: backup
    mode: '0750'

- name: Configure backup log rotation
  template:
    src: backup-logrotate.j2
    dest: /etc/logrotate.d/hx-backup
    owner: root
    group: root
    mode: '0644'

- name: Create backup security audit script
  template:
    src: backup-security-audit.sh.j2
    dest: /var/lib/backup/scripts/backup-security-audit.sh
    owner: backup
    group: backup
    mode: '0750'

- name: Schedule backup security audit
  cron:
    name: "Backup Security Audit"
    user: backup
    job: "/var/lib/backup/scripts/backup-security-audit.sh"
    minute: "0"
    hour: "6"
    day: "1"
    state: present

- name: Create backup integrity verification key
  command: openssl rand -hex 32
  register: backup_integrity_key
  no_log: true
  when:
    - verification.enabled
    - not ansible_check_mode

- name: Store backup integrity key
  copy:
    content: "{{ backup_integrity_key.stdout }}"
    dest: /etc/hx-backup/integrity.key
    owner: backup
    group: backup
    mode: "{{ backup_security.file_permissions }}"
  no_log: true
  when:
    - verification.enabled
    - backup_integrity_key is defined
    - not ansible_check_mode

- name: Configure backup user limits
  pam_limits:
    domain: backup
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  loop:
    - { type: 'soft', item: 'nofile', value: '65536' }
    - { type: 'hard', item: 'nofile', value: '65536' }
    - { type: 'soft', item: 'nproc', value: '32768' }
    - { type: 'hard', item: 'nproc', value: '32768' }
