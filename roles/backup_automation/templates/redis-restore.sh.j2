#!/bin/bash
umask 0077

#!/bin/bash
# Redis Restore Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail
umask 0077

# Configuration
REDIS_HOST="{{ database_backup.databases.redis.host }}"
REDIS_PORT="{{ database_backup.databases.redis.port }}"
TEMP_DIR="{{ backup_automation.temp_directory }}/redis_restore"
LOG_FILE="{{ backup_automation.log_directory }}/redis-restore.log"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Logging function
log() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Cleanup function
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}
trap cleanup EXIT

# Create directories
mkdir -p "$(dirname "$LOG_FILE")" "$TEMP_DIR"

# Usage function
usage() {
    echo "Usage: $0 <backup_file>"
    echo "Restores Redis from backup file"
    exit 1
}

# Parse arguments
if [[ $# -lt 1 ]]; then
    usage
fi

BACKUP_FILE="$1"

log "INFO" "Starting Redis restore"
log "INFO" "Backup file: $BACKUP_FILE"

# Verify backup file exists
if [[ ! -f "$BACKUP_FILE" ]]; then
    log "ERROR" "Backup file not found: $BACKUP_FILE"
    exit 1
fi

# Test Redis connection
log "INFO" "Testing Redis connection to $REDIS_HOST:$REDIS_PORT"
if ! redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" ping > /dev/null 2>&1; then
    log "ERROR" "Cannot connect to Redis server"
    exit 1
fi

# Decrypt if needed
RESTORE_FILE="$BACKUP_FILE"
{% if backup_automation.encryption.enabled %}
if [[ "$BACKUP_FILE" == *.enc ]]; then
    log "INFO" "Decrypting backup file"
    RESTORE_FILE="$TEMP_DIR/$(basename "$BACKUP_FILE" .enc)"
    if ! openssl enc -{{ backup_automation.encryption.algorithm | lower }} -d \
        -pbkdf2 -iter 20000 \
        -in "$BACKUP_FILE" \
        -out "$RESTORE_FILE" \
        -pass file:"{{ backup_automation.encryption.key_file }}"; then
        log "ERROR" "Failed to decrypt backup file"
        exit 1
    fi
fi
{% endif %}

# Decompress if needed
if [[ "$RESTORE_FILE" == *.gz ]]; then
    log "INFO" "Decompressing backup file"
    DECOMPRESSED_FILE="$TEMP_DIR/dump.rdb"
    if ! gunzip -c "$RESTORE_FILE" > "$DECOMPRESSED_FILE"; then
        log "ERROR" "Failed to decompress backup file"
        exit 1
    fi
    RESTORE_FILE="$DECOMPRESSED_FILE"
fi

# Verify RDB file
log "INFO" "Verifying RDB file integrity"
if ! redis-check-rdb "$RESTORE_FILE" > /dev/null 2>&1; then
    log "ERROR" "RDB file integrity check failed"
    exit 1
fi

# Get Redis data directory
REDIS_DATA_DIR=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" CONFIG GET dir | tail -1)
REDIS_RDB_FILE=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" CONFIG GET dbfilename | tail -1)
REDIS_RDB_PATH="$REDIS_DATA_DIR/$REDIS_RDB_FILE"

log "INFO" "Redis data directory: $REDIS_DATA_DIR"
log "INFO" "Redis RDB file: $REDIS_RDB_FILE"

# Stop Redis (if we have control)
log "INFO" "Attempting to shutdown Redis gracefully"
redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" SHUTDOWN NOSAVE || true

# Wait for Redis to stop
sleep 2

# Copy RDB file
log "INFO" "Copying RDB file to Redis data directory"
if ! cp "$RESTORE_FILE" "$REDIS_RDB_PATH"; then
    log "ERROR" "Failed to copy RDB file to Redis data directory"
    exit 1
fi

# Set proper ownership and permissions
chown redis:redis "$REDIS_RDB_PATH" 2>/dev/null || true
chmod 660 "$REDIS_RDB_PATH"

# Start Redis (assuming systemd)
log "INFO" "Starting Redis server"
if command -v systemctl >/dev/null 2>&1; then
    systemctl start redis-server || systemctl start redis
else
    service redis-server start || service redis start
fi

# Wait for Redis to start
log "INFO" "Waiting for Redis to start"
for i in {1..30}; do
    if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" ping > /dev/null 2>&1; then
        break
    fi
    sleep 1
done

# Verify Redis is running
if ! redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" ping > /dev/null 2>&1; then
    log "ERROR" "Redis failed to start after restore"
    exit 1
fi

# Get key count for verification
KEY_COUNT=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" DBSIZE)
log "INFO" "Restored Redis database contains $KEY_COUNT keys"

log "INFO" "Redis restore completed successfully"
