
#!/bin/bash
# Database Backup Monitoring Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
BACKUP_BASE="{{ backup_automation.base_directory }}/database"
LOG_FILE="{{ backup_automation.log_directory }}/backup-monitoring.log"
ALERT_THRESHOLD_HOURS=25  # Alert if no backup in 25 hours
METRICS_FILE="/var/lib/backup/metrics/backup-status.txt"

# Logging function
log() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Create directories
mkdir -p "$(dirname "$LOG_FILE")" "$(dirname "$METRICS_FILE")"

log "INFO" "Starting database backup monitoring"

# Initialize status
OVERALL_STATUS="OK"
ALERTS=()

# Function to check backup freshness
check_backup_freshness() {
    local backup_dir="$1"
    local service_name="$2"
    
    if [[ ! -d "$backup_dir" ]]; then
        log "WARN" "Backup directory does not exist: $backup_dir"
        return
    fi
    
    # Find most recent backup
    local latest_backup
    latest_backup=$(find "$backup_dir" -name "*.sql*" -o -name "*.rdb*" -o -name "*.dump*" | head -1)
    
    if [[ -z "$latest_backup" ]]; then
        log "ERROR" "No backups found for $service_name"
        OVERALL_STATUS="CRITICAL"
        ALERTS+=("No backups found for $service_name")
        return
    fi
    
    # Check backup age
    local backup_age_seconds
    backup_age_seconds=$(( $(date +%s) - $(stat -f%m "$latest_backup" 2>/dev/null || stat -c%Y "$latest_backup") ))
    local backup_age_hours=$((backup_age_seconds / 3600))
    
    log "INFO" "$service_name latest backup: $(basename "$latest_backup") (${backup_age_hours}h old)"
    
    if [[ $backup_age_hours -gt $ALERT_THRESHOLD_HOURS ]]; then
        log "ERROR" "$service_name backup is too old: ${backup_age_hours}h"
        OVERALL_STATUS="CRITICAL"
        ALERTS+=("$service_name backup is ${backup_age_hours}h old (threshold: ${ALERT_THRESHOLD_HOURS}h)")
    fi
    
    # Check backup size
    local backup_size
    backup_size=$(stat -f%z "$latest_backup" 2>/dev/null || stat -c%s "$latest_backup")
    local backup_size_mb=$((backup_size / 1024 / 1024))
    
    log "INFO" "$service_name backup size: ${backup_size_mb}MB"
    
    if [[ $backup_size_mb -lt 1 ]]; then
        log "ERROR" "$service_name backup is too small: ${backup_size_mb}MB"
        OVERALL_STATUS="CRITICAL"
        ALERTS+=("$service_name backup is too small: ${backup_size_mb}MB")
    fi
}

# Check PostgreSQL backups
{% if database_backup.databases.postgresql.enabled %}
check_backup_freshness "$BACKUP_BASE/postgresql" "PostgreSQL"
{% endif %}

# Check Redis backups
{% if database_backup.databases.redis.enabled %}
check_backup_freshness "$BACKUP_BASE/redis" "Redis"
{% endif %}

# Check disk space
BACKUP_DISK_USAGE=$(df "{{ backup_automation.base_directory }}" | tail -1 | awk '{print $5}' | sed 's/%//')
log "INFO" "Backup disk usage: ${BACKUP_DISK_USAGE}%"

if [[ $BACKUP_DISK_USAGE -gt 90 ]]; then
    log "ERROR" "Backup disk usage is critical: ${BACKUP_DISK_USAGE}%"
    OVERALL_STATUS="CRITICAL"
    ALERTS+=("Backup disk usage is critical: ${BACKUP_DISK_USAGE}%")
elif [[ $BACKUP_DISK_USAGE -gt 80 ]]; then
    log "WARN" "Backup disk usage is high: ${BACKUP_DISK_USAGE}%"
    if [[ "$OVERALL_STATUS" == "OK" ]]; then
        OVERALL_STATUS="WARNING"
    fi
    ALERTS+=("Backup disk usage is high: ${BACKUP_DISK_USAGE}%")
fi

# Write metrics for Prometheus
cat > "$METRICS_FILE" << EOF
# HELP backup_status Overall backup system status (0=OK, 1=WARNING, 2=CRITICAL)
# TYPE backup_status gauge
backup_status{service="database"} $(case $OVERALL_STATUS in OK) echo 0;; WARNING) echo 1;; CRITICAL) echo 2;; esac)

# HELP backup_disk_usage_percent Backup storage disk usage percentage
# TYPE backup_disk_usage_percent gauge
backup_disk_usage_percent{path="{{ backup_automation.base_directory }}"} $BACKUP_DISK_USAGE

# HELP backup_last_run_timestamp Unix timestamp of last backup monitoring run
# TYPE backup_last_run_timestamp gauge
backup_last_run_timestamp $(date +%s)
EOF

# Send alerts if needed
if [[ ${#ALERTS[@]} -gt 0 ]]; then
    log "ERROR" "Found ${#ALERTS[@]} backup issues"
    
    {% if backup_automation.notifications.enabled %}
    # Send notification
    if command -v /var/lib/backup/scripts/send-backup-notification.sh >/dev/null 2>&1; then
        ALERT_MESSAGE=$(printf '%s\n' "${ALERTS[@]}")
        /var/lib/backup/scripts/send-backup-notification.sh "monitoring" "alert" "$OVERALL_STATUS" "$ALERT_MESSAGE"
    fi
    {% endif %}
    
    if [[ "$OVERALL_STATUS" == "CRITICAL" ]]; then
        exit 2
    elif [[ "$OVERALL_STATUS" == "WARNING" ]]; then
        exit 1
    fi
fi

log "INFO" "Database backup monitoring completed: $OVERALL_STATUS"
