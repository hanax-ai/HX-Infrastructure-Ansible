#!/bin/bash
umask 0077

#!/bin/bash
# PostgreSQL Restore Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail
umask 0077

# Configuration
PG_HOST="{{ database_backup.databases.postgresql.host }}"
PG_PORT="{{ database_backup.databases.postgresql.port }}"
PG_USER="${PGUSER:-postgres}"
BACKUP_BASE="{{ backup_automation.base_directory }}/database/postgresql"
TEMP_DIR="{{ backup_automation.temp_directory }}/postgresql_restore"
LOG_FILE="{{ backup_automation.log_directory }}/postgresql-restore.log"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Logging function
log() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Cleanup function
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}
trap cleanup EXIT

# Create directories
mkdir -p "$(dirname "$LOG_FILE")" "$TEMP_DIR"

# Usage function
usage() {
    echo "Usage: $0 <backup_file> <target_database> [options]"
    echo "Options:"
    echo "  --clean    Drop and recreate database"
    echo "  --data-only    Restore data only"
    echo "  --schema-only  Restore schema only"
    exit 1
}

# Parse arguments
if [[ $# -lt 2 ]]; then
    usage
fi

BACKUP_FILE="$1"
TARGET_DB="$2"
shift 2

CLEAN_DB=false
DATA_ONLY=false
SCHEMA_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --clean)
            CLEAN_DB=true
            shift
            ;;
        --data-only)
            DATA_ONLY=true
            shift
            ;;
        --schema-only)
            SCHEMA_ONLY=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

log "INFO" "Starting PostgreSQL restore for database: $TARGET_DB"
log "INFO" "Backup file: $BACKUP_FILE"

# Verify backup file exists
if [[ ! -f "$BACKUP_FILE" ]]; then
    log "ERROR" "Backup file not found: $BACKUP_FILE"
    exit 1
fi

# Decrypt if needed
RESTORE_FILE="$BACKUP_FILE"
{% if backup_automation.encryption.enabled %}
if [[ "$BACKUP_FILE" == *.enc ]]; then
    log "INFO" "Decrypting backup file"
    RESTORE_FILE="$TEMP_DIR/$(basename "$BACKUP_FILE" .enc)"
    if ! openssl enc -{{ backup_automation.encryption.algorithm | lower }} -d \
        -pbkdf2 -iter 20000 \
        -in "$BACKUP_FILE" \
        -out "$RESTORE_FILE" \
        -pass file:"{{ backup_automation.encryption.key_file }}"; then
        log "ERROR" "Failed to decrypt backup file"
        exit 1
    fi
fi
{% endif %}

# Test PostgreSQL connection
log "INFO" "Testing PostgreSQL connection"
if [[ -z "${PGPASSWORD:-}" && -z "${PGPASSFILE:-}" ]]; then
    log "WARN" "Neither PGPASSWORD nor PGPASSFILE is set; relying on peer/trust auth."
fi

if ! PGPASSWORD="$PGPASSWORD" psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d postgres -c "SELECT version();" > /dev/null 2>&1; then
    log "ERROR" "Cannot connect to PostgreSQL server"
    exit 1
fi

# Drop and recreate database if requested
if [[ "$CLEAN_DB" == "true" ]]; then
    log "INFO" "Dropping and recreating database: $TARGET_DB"
    PGPASSWORD="$PGPASSWORD" psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d postgres -c "DROP DATABASE IF EXISTS \"$TARGET_DB\";"
    PGPASSWORD="$PGPASSWORD" psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d postgres -c "CREATE DATABASE \"$TARGET_DB\";"
fi

# Build pg_restore command
PG_RESTORE_CMD="pg_restore -h $PG_HOST -p $PG_PORT -U $PG_USER -d $TARGET_DB --verbose"

if [[ "$DATA_ONLY" == "true" ]]; then
    PG_RESTORE_CMD="$PG_RESTORE_CMD --data-only"
elif [[ "$SCHEMA_ONLY" == "true" ]]; then
    PG_RESTORE_CMD="$PG_RESTORE_CMD --schema-only"
fi

# Perform restore
log "INFO" "Starting database restore"
if PGPASSWORD="$PGPASSWORD" $PG_RESTORE_CMD "$RESTORE_FILE" 2>&1 | tee -a "$LOG_FILE"; then
    log "INFO" "Database restore completed successfully"
else
    log "ERROR" "Database restore failed"
    exit 1
fi

# Verify restore
log "INFO" "Verifying restored database"
TABLE_COUNT=$(PGPASSWORD="$PGPASSWORD" psql -h "$PG_HOST" -p "$PG_PORT" -U "$PG_USER" -d "$TARGET_DB" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")
log "INFO" "Restored database contains $TABLE_COUNT tables"

log "INFO" "PostgreSQL restore completed successfully"
