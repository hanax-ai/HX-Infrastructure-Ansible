#!/bin/bash
umask 0077

#!/bin/bash
# Redis Backup Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail
umask 0077

# Configuration
REDIS_HOST="{{ database_backup.databases.redis.host }}"
REDIS_PORT="{{ database_backup.databases.redis.port }}"
BACKUP_TYPE="${1:-daily}"
BACKUP_BASE="{{ backup_automation.base_directory }}/database/redis"
TEMP_DIR="{{ backup_automation.temp_directory }}/redis_$TIMESTAMP"
LOG_FILE="{{ backup_automation.log_directory }}/redis-backup.log"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="$BACKUP_BASE/redis_${BACKUP_TYPE}_$TIMESTAMP.rdb"

# Logging function
log() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Cleanup function
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}
trap cleanup EXIT

# Create directories
mkdir -p "$BACKUP_BASE" "$TEMP_DIR" "$(dirname "$LOG_FILE")"

log "INFO" "Starting Redis backup ($BACKUP_TYPE)"

# Test Redis connection
log "INFO" "Testing Redis connection to $REDIS_HOST:$REDIS_PORT"
if ! redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" ping > /dev/null 2>&1; then
    log "ERROR" "Cannot connect to Redis server"
    exit 1
fi

{% if database_backup.redis.save_before_backup %}
# Force save before backup
log "INFO" "Forcing Redis save"
if ! redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" BGSAVE; then
    log "ERROR" "Failed to initiate Redis background save"
    exit 1
fi

# Wait for save to complete
log "INFO" "Waiting for background save to complete"
while [[ "$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" LASTSAVE)" == "$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" LASTSAVE)" ]]; do
    sleep 1
done
{% endif %}

# Get Redis data directory
REDIS_DATA_DIR=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" CONFIG GET dir | tail -1)
REDIS_RDB_FILE=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" CONFIG GET dbfilename | tail -1)
REDIS_RDB_PATH="$REDIS_DATA_DIR/$REDIS_RDB_FILE"

log "INFO" "Redis RDB file location: $REDIS_RDB_PATH"

# Copy RDB file
log "INFO" "Copying Redis RDB file"
if [[ -f "$REDIS_RDB_PATH" ]]; then
    cp "$REDIS_RDB_PATH" "$TEMP_DIR/dump.rdb"
else
    log "ERROR" "Redis RDB file not found: $REDIS_RDB_PATH"
    exit 1
fi

{% if database_backup.redis.verify_rdb %}
# Verify RDB file
log "INFO" "Verifying RDB file integrity"
if ! redis-check-rdb "$TEMP_DIR/dump.rdb" > /dev/null 2>&1; then
    log "ERROR" "RDB file integrity check failed"
    exit 1
fi
{% endif %}

# Compress if enabled
{% if backup_automation.compression.enabled %}
log "INFO" "Compressing backup"
if ! gzip -{{ backup_automation.compression.level }} "$TEMP_DIR/dump.rdb"; then
    log "ERROR" "Failed to compress backup"
    exit 1
fi
mv "$TEMP_DIR/dump.rdb.gz" "$BACKUP_FILE.gz"
BACKUP_FILE="$BACKUP_FILE.gz"
{% else %}
mv "$TEMP_DIR/dump.rdb" "$BACKUP_FILE"
{% endif %}

# Generate checksum
log "INFO" "Generating backup checksum"
{{ verification.checksum_algorithm | default('sha256') }}sum "$BACKUP_FILE" > "$BACKUP_FILE.{{ verification.checksum_algorithm | default('sha256') }}"

{% if backup_automation.encryption.enabled %}
# Encrypt backup
log "INFO" "Encrypting backup"
if ! openssl enc -{{ backup_automation.encryption.algorithm | lower }} \
    -pbkdf2 -iter 20000 -salt \
    -in "$BACKUP_FILE" \
    -out "$BACKUP_FILE.enc" \
    -pass file:"{{ backup_automation.encryption.key_file }}"; then
    log "ERROR" "Failed to encrypt backup"
    exit 1
fi
rm "$BACKUP_FILE"
BACKUP_FILE="$BACKUP_FILE.enc"
{% endif %}

# Set permissions
chmod {{ backup_security.file_permissions }} "$BACKUP_FILE"*
chown {{ backup_security.owner }}:{{ backup_security.group }} "$BACKUP_FILE"*

# Get backup size
BACKUP_SIZE=$(stat -f%z "$BACKUP_FILE" 2>/dev/null || stat -c%s "$BACKUP_FILE")
log "INFO" "Backup completed: $BACKUP_FILE ($(numfmt --to=iec $BACKUP_SIZE))"

{% if remote_storage.enabled and remote_storage.type == 's3' %}
# Sync to remote storage
log "INFO" "Syncing to remote storage"
if command -v /var/lib/backup/scripts/sync-to-remote.sh >/dev/null 2>&1; then
    /var/lib/backup/scripts/sync-to-remote.sh "$BACKUP_FILE"
fi
{% endif %}

{% if backup_automation.notifications.enabled %}
# Send notification
log "INFO" "Sending backup notification"
if command -v /var/lib/backup/scripts/send-backup-notification.sh >/dev/null 2>&1; then
    /var/lib/backup/scripts/send-backup-notification.sh "redis" "$BACKUP_TYPE" "success" "$BACKUP_FILE"
fi
{% endif %}

log "INFO" "Redis backup completed successfully"
