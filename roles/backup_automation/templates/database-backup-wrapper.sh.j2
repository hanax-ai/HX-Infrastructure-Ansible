#!/bin/bash
umask 0077

#!/bin/bash
# Database Backup Wrapper Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail
umask 0077

# Configuration
BACKUP_TYPE="${1:-daily}"
LOG_FILE="{{ backup_automation.log_directory }}/database-backup-wrapper.log"
LOCK_FILE="/var/run/database-backup.lock"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Logging function
log() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Cleanup function
cleanup() {
    if [[ -f "$LOCK_FILE" ]]; then
        rm -f "$LOCK_FILE"
    fi
}
trap cleanup EXIT

# Create log directory
mkdir -p "$(dirname "$LOG_FILE")"

log "INFO" "Starting database backup wrapper ($BACKUP_TYPE)"

# Check for existing backup process
if [[ -f "$LOCK_FILE" ]]; then
    PID=$(cat "$LOCK_FILE")
    if kill -0 "$PID" 2>/dev/null; then
        log "ERROR" "Another backup process is already running (PID: $PID)"
        exit 1
    else
        log "WARN" "Stale lock file found, removing"
        rm -f "$LOCK_FILE"
    fi
fi

# Create lock file
echo $$ > "$LOCK_FILE"

# Initialize counters
TOTAL_BACKUPS=0
SUCCESSFUL_BACKUPS=0
FAILED_BACKUPS=0

{% if database_backup.databases.postgresql.enabled %}
# PostgreSQL Backup
log "INFO" "Starting PostgreSQL backup"
TOTAL_BACKUPS=$((TOTAL_BACKUPS + 1))
if /var/lib/backup/scripts/postgresql-backup.sh "$BACKUP_TYPE" 2>&1 | tee -a "$LOG_FILE"; then
    log "INFO" "PostgreSQL backup completed successfully"
    SUCCESSFUL_BACKUPS=$((SUCCESSFUL_BACKUPS + 1))
else
    log "ERROR" "PostgreSQL backup failed"
    FAILED_BACKUPS=$((FAILED_BACKUPS + 1))
fi
{% endif %}

{% if database_backup.databases.redis.enabled %}
# Redis Backup
log "INFO" "Starting Redis backup"
TOTAL_BACKUPS=$((TOTAL_BACKUPS + 1))
if /var/lib/backup/scripts/redis-backup.sh "$BACKUP_TYPE" 2>&1 | tee -a "$LOG_FILE"; then
    log "INFO" "Redis backup completed successfully"
    SUCCESSFUL_BACKUPS=$((SUCCESSFUL_BACKUPS + 1))
else
    log "ERROR" "Redis backup failed"
    FAILED_BACKUPS=$((FAILED_BACKUPS + 1))
fi
{% endif %}

# Backup verification
{% if verification.enabled %}
log "INFO" "Starting backup verification"
if /var/lib/backup/scripts/verify-database-backup.sh 2>&1 | tee -a "$LOG_FILE"; then
    log "INFO" "Backup verification completed successfully"
else
    log "ERROR" "Backup verification failed"
    FAILED_BACKUPS=$((FAILED_BACKUPS + 1))
fi
{% endif %}

# Cleanup old backups
log "INFO" "Starting backup cleanup"
if /var/lib/backup/scripts/cleanup-database-backups.sh 2>&1 | tee -a "$LOG_FILE"; then
    log "INFO" "Backup cleanup completed successfully"
else
    log "ERROR" "Backup cleanup failed"
fi

# Summary
log "INFO" "Database backup wrapper completed"
log "INFO" "Total backups: $TOTAL_BACKUPS, Successful: $SUCCESSFUL_BACKUPS, Failed: $FAILED_BACKUPS"

{% if backup_automation.notifications.enabled %}
# Send notification
NOTIFICATION_STATUS="success"
if [[ $FAILED_BACKUPS -gt 0 ]]; then
    NOTIFICATION_STATUS="failure"
fi

if command -v /var/lib/backup/scripts/send-backup-notification.sh >/dev/null 2>&1; then
    /var/lib/backup/scripts/send-backup-notification.sh "database" "$BACKUP_TYPE" "$NOTIFICATION_STATUS" "Total: $TOTAL_BACKUPS, Success: $SUCCESSFUL_BACKUPS, Failed: $FAILED_BACKUPS"
fi
{% endif %}

# Exit with error if any backups failed
if [[ $FAILED_BACKUPS -gt 0 ]]; then
    exit 1
fi

log "INFO" "All database backups completed successfully"
