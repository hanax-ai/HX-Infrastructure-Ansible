
#!/bin/bash
# Database Backup Cleanup Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
BACKUP_BASE="{{ backup_automation.base_directory }}/database"
LOG_FILE="{{ backup_automation.log_directory }}/backup-cleanup.log"
RETENTION_DAILY={{ backup_automation.retention.daily }}
RETENTION_WEEKLY={{ backup_automation.retention.weekly }}
RETENTION_MONTHLY={{ backup_automation.retention.monthly }}
RETENTION_YEARLY={{ backup_automation.retention.yearly }}

# Logging function
log() {
    local level="$1"
    local message="$2"
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] $message" | tee -a "$LOG_FILE"
}

# Create log directory
mkdir -p "$(dirname "$LOG_FILE")"

log "INFO" "Starting database backup cleanup"

# Function to cleanup backups by type and retention
cleanup_backups() {
    local backup_dir="$1"
    local backup_type="$2"
    local retention_days="$3"
    
    if [[ ! -d "$backup_dir" ]]; then
        log "WARN" "Backup directory does not exist: $backup_dir"
        return
    fi
    
    log "INFO" "Cleaning up $backup_type backups in $backup_dir (retention: $retention_days days)"
    
    # Find and remove old backups
    local removed_count=0
    while IFS= read -r -d '' file; do
        if [[ -f "$file" ]]; then
            rm -f "$file" "$file".*
            log "INFO" "Removed old backup: $(basename "$file")"
            removed_count=$((removed_count + 1))
        fi
    done < <(find "$backup_dir" -name "*_${backup_type}_*" -type f -mtime +$retention_days -print0)
    
    log "INFO" "Removed $removed_count old $backup_type backups"
}

# Cleanup PostgreSQL backups
{% if database_backup.databases.postgresql.enabled %}
PG_BACKUP_DIR="$BACKUP_BASE/postgresql"
cleanup_backups "$PG_BACKUP_DIR" "daily" "$RETENTION_DAILY"
cleanup_backups "$PG_BACKUP_DIR" "weekly" "$((RETENTION_WEEKLY * 7))"
cleanup_backups "$PG_BACKUP_DIR" "monthly" "$((RETENTION_MONTHLY * 30))"
cleanup_backups "$PG_BACKUP_DIR" "yearly" "$((RETENTION_YEARLY * 365))"
{% endif %}

# Cleanup Redis backups
{% if database_backup.databases.redis.enabled %}
REDIS_BACKUP_DIR="$BACKUP_BASE/redis"
cleanup_backups "$REDIS_BACKUP_DIR" "daily" "$RETENTION_DAILY"
cleanup_backups "$REDIS_BACKUP_DIR" "weekly" "$((RETENTION_WEEKLY * 7))"
cleanup_backups "$REDIS_BACKUP_DIR" "monthly" "$((RETENTION_MONTHLY * 30))"
cleanup_backups "$REDIS_BACKUP_DIR" "yearly" "$((RETENTION_YEARLY * 365))"
{% endif %}

# Cleanup temporary files
TEMP_DIR="{{ backup_automation.temp_directory }}"
if [[ -d "$TEMP_DIR" ]]; then
    log "INFO" "Cleaning up temporary files older than 1 day"
    find "$TEMP_DIR" -type f -mtime +1 -delete 2>/dev/null || true
    find "$TEMP_DIR" -type d -empty -delete 2>/dev/null || true
fi

# Cleanup old log files
LOG_DIR="{{ backup_automation.log_directory }}"
if [[ -d "$LOG_DIR" ]]; then
    log "INFO" "Cleaning up log files older than 30 days"
    find "$LOG_DIR" -name "*.log" -type f -mtime +30 -delete 2>/dev/null || true
fi

log "INFO" "Database backup cleanup completed"
