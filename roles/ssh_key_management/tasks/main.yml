---

---
# SSH Key Management Role - Phase 2 Day 2
# Comprehensive SSH key management for production environments

- name: Create SSH key management directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0750'
  loop:
    - "{{ ssh_key_backup_dir }}"
    - "{{ ssh_key_log_dir }}"
    - "/etc/ansible/ssh_keys"
  tags: [ssh_keys, setup]

- name: Backup existing SSH keys before rotation
  block:
    - name: Find existing SSH keys
      find:
        paths: "{{ ansible_user_dir }}/.ssh"
        patterns: "{{ ssh_key_patterns }}"
      register: existing_keys
      become: true
      become_user: "{{ ansible_user }}"

    - name: Create timestamped backup directory
      file:
        path: "{{ ssh_key_backup_dir }}/{{ ansible_date_time.epoch }}"
        state: directory
        owner: root
        group: root
        mode: '0750'
      register: backup_dir

    - name: Backup existing keys
      copy:
        src: "{{ item.path }}"
        dest: "{{ backup_dir.path }}/{{ item.path | basename }}"
        owner: root
        group: root
        mode: '0600'
        backup: true
      loop: "{{ existing_keys.files }}"
      when: existing_keys.files | length > 0
  when: ssh_key_backup_enabled | default(true) | bool
  tags: [ssh_keys, backup]

- name: Generate new SSH key pair
  openssh_keypair:
    path: "{{ ssh_key_private_path }}"
    type: "{{ ssh_key_type }}"
    size: "{{ ssh_key_size }}"
    comment: "{{ ssh_key_comment }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'
    force: "{{ ssh_key_force_regenerate | default(false) }}"
  register: ssh_key_generated
  tags: [ssh_keys, generate]

- name: Set public key permissions
  file:
    path: "{{ ssh_key_private_path }}.pub"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  tags: [ssh_keys, permissions]

- name: Distribute public key to authorized_keys
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ lookup('file', ssh_key_private_path + '.pub') }}"
    comment: "{{ ssh_key_comment }}"
    exclusive: "{{ ssh_key_exclusive | default(false) }}"
  tags: [ssh_keys, distribute]

- name: Test SSH connectivity with new key
  block:
    - name: Test SSH connection
      wait_for_connection:
        timeout: "{{ ssh_connection_timeout }}"
      vars:
        ansible_ssh_private_key_file: "{{ ssh_key_private_path }}"
      register: ssh_test_result

    - name: Log successful SSH test
      lineinfile:
        path: "{{ ssh_key_log_dir }}/ssh_key_operations.log"
        line: "{{ ansible_date_time.iso8601 }} - SSH_KEY_TEST: SUCCESS - {{ inventory_hostname }} - {{ ssh_key_comment }}"
        create: true
        owner: root
        group: root
        mode: '0640'
      delegate_to: localhost
  rescue:
    - name: Log failed SSH test
      lineinfile:
        path: "{{ ssh_key_log_dir }}/ssh_key_operations.log"
        line: "{{ ansible_date_time.iso8601 }} - SSH_KEY_TEST: FAILED - {{ inventory_hostname }} - {{ ssh_key_comment }}"
        create: true
        owner: root
        group: root
        mode: '0640'
      delegate_to: localhost

    - name: Restore previous keys on failure
      copy:
        src: "{{ backup_dir.path }}/{{ item.path | basename }}"
        dest: "{{ item.path }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "{{ item.mode }}"
      loop: "{{ existing_keys.files }}"
      when:
        - existing_keys.files is defined
        - existing_keys.files | length > 0
        - backup_dir is defined

    - name: Fail after restoration
      fail:
        msg: "SSH key deployment failed. Previous keys restored."
  when: ssh_key_test_connectivity | default(true) | bool
  tags: [ssh_keys, test]

- name: Configure SSH client settings
  template:
    src: ssh_config.j2
    dest: "{{ ansible_user_dir }}/.ssh/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'
    backup: true
  when: ssh_client_config_enabled | default(true) | bool
  tags: [ssh_keys, config]

- name: Set up SSH key rotation schedule
  cron:
    name: "SSH Key Rotation - {{ inventory_hostname }}"
    job: "/usr/local/bin/rotate_ssh_keys.sh {{ inventory_hostname }}"
    minute: "0"
    hour: "2"
    day: "1"
    month: "*"
    weekday: "*"
    user: root
    state: "{{ 'present' if ssh_key_rotation_enabled else 'absent' }}"
  when: ssh_key_rotation_enabled | default(false) | bool
  tags: [ssh_keys, rotation]

- name: Create SSH key rotation script
  template:
    src: rotate_ssh_keys.sh.j2
    dest: "/usr/local/bin/rotate_ssh_keys.sh"
    owner: root
    group: root
    mode: '0750'
  when: ssh_key_rotation_enabled | default(false) | bool
  tags: [ssh_keys, rotation]

- name: Configure SSH security settings
  blockinfile:
    path: "/etc/ssh/sshd_config"
    block: |
      # Enhanced SSH Security - Ansible Managed
      Protocol 2
      PermitRootLogin no
      PasswordAuthentication no
      PubkeyAuthentication yes
      AuthorizedKeysFile .ssh/authorized_keys
      PermitEmptyPasswords no
      ChallengeResponseAuthentication no
      UsePAM yes
      X11Forwarding no
      PrintMotd no
      ClientAliveInterval 300
      ClientAliveCountMax 2
      MaxAuthTries 3
      MaxSessions 10
      LoginGraceTime 60
      StrictModes yes
      IgnoreRhosts yes
      HostbasedAuthentication no
      # Restrict SSH to specific users/groups
      AllowUsers {{ ansible_user }}
      # Key exchange algorithms
      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512
      # Ciphers
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
      # MAC algorithms
      MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512
    marker: "# {mark} ANSIBLE MANAGED SSH SECURITY BLOCK"
    backup: true
  notify: restart sshd
  when: ssh_security_hardening | default(true) | bool
  tags: [ssh_keys, security]

- name: Validate SSH configuration
  command: sshd -t
  register: sshd_config_test
  changed_when: false
  failed_when: sshd_config_test.rc != 0
  tags: [ssh_keys, validation]

- name: Create SSH key inventory
  template:
    src: ssh_key_inventory.yml.j2
    dest: "{{ ssh_key_log_dir }}/ssh_key_inventory.yml"
    owner: root
    group: root
    mode: '0640'
  vars:
    key_fingerprint: "{{ ssh_key_generated.fingerprint | default('Unknown') }}"
    key_path: "{{ ssh_key_private_path }}"
    key_type: "{{ ssh_key_type }}"
    creation_date: "{{ ansible_date_time.iso8601 }}"
  tags: [ssh_keys, inventory]

- name: Log SSH key management operation
  lineinfile:
    path: "{{ ssh_key_log_dir }}/ssh_key_operations.log"
    line: |
      {{ ansible_date_time.iso8601 }} - SSH_KEY_MGMT: {{ 'GENERATED' if ssh_key_generated.changed else 'VERIFIED' }}
      Host: {{ inventory_hostname }} | User: {{ ansible_user }} | Type: {{ ssh_key_type }}
      Fingerprint: {{ ssh_key_generated.fingerprint | default('N/A') }}
    create: true
    owner: root
    group: root
    mode: '0640'
  delegate_to: localhost
  tags: [ssh_keys, logging]
