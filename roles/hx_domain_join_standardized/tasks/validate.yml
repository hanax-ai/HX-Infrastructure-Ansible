
---
# Validation tasks for hx_domain_join_standardized role
# Comprehensive input validation and system compatibility checks

- name: Validate required domain variables
  ansible.builtin.assert:
    that:
      - hx_domain_join_domain_name is defined
      - hx_domain_join_domain_name | length > 0
      - hx_domain_join_domain_name | regex_search('^\w+\.\w+')
      - hx_domain_join_domain_netbios is defined
      - hx_domain_join_domain_netbios | length > 0
      - hx_domain_join_realm is defined
      - hx_domain_join_realm | length > 0
    fail_msg: "Domain configuration variables must be properly defined"
    success_msg: "Domain configuration validation passed"

- name: Validate domain controllers
  ansible.builtin.assert:
    that:
      - hx_domain_join_domain_controllers is defined
      - hx_domain_join_domain_controllers | length > 0
      - hx_domain_join_preferred_dc is defined
      - hx_domain_join_preferred_dc in hx_domain_join_domain_controllers
    fail_msg: "Domain controllers must be properly configured"
    success_msg: "Domain controllers validation passed"

- name: Validate authentication credentials
  ansible.builtin.assert:
    that:
      - hx_domain_join_admin_user is defined
      - hx_domain_join_admin_user | length > 0
      - hx_domain_join_admin_password is defined
      - hx_domain_join_admin_password | length > 0
      - hx_domain_join_service_account is defined
      - hx_domain_join_service_password is defined
    fail_msg: "Authentication credentials must be properly defined"
    success_msg: "Authentication credentials validation passed"

- name: Validate computer account settings
  ansible.builtin.assert:
    that:
      - hx_domain_join_computer_name is defined
      - hx_domain_join_computer_name | length > 0
      - hx_domain_join_computer_name | length <= 15  # NetBIOS name limit
      - hx_domain_join_computer_ou is defined
      - hx_domain_join_computer_ou | regex_search('^(OU=|CN=)')
    fail_msg: "Computer account settings must be valid"
    success_msg: "Computer account settings validation passed"

- name: Validate DNS configuration
  ansible.builtin.assert:
    that:
      - hx_domain_join_dns_servers is defined
      - hx_domain_join_dns_servers | length > 0
      - hx_domain_join_dns_search_domains is defined
      - hx_domain_join_dns_timeout | int > 0
      - hx_domain_join_dns_timeout | int <= 30
    fail_msg: "DNS configuration must be valid"
    success_msg: "DNS configuration validation passed"
  when: hx_domain_join_configure_dns | default(true)

- name: Validate Kerberos settings
  ansible.builtin.assert:
    that:
      - hx_domain_join_kerberos_encryption_types is defined
      - hx_domain_join_kerberos_encryption_types | length > 0
      - hx_domain_join_kerberos_ticket_lifetime | regex_search('^\d+[hdm]$')
      - hx_domain_join_kerberos_renew_lifetime | regex_search('^\d+[hdm]$')
    fail_msg: "Kerberos settings must be valid"
    success_msg: "Kerberos settings validation passed"

- name: Validate access control groups
  ansible.builtin.assert:
    that:
      - hx_domain_join_allowed_groups is defined
      - hx_domain_join_allowed_groups | length > 0
      - hx_domain_join_sudo_groups is defined
    fail_msg: "Access control groups must be defined"
    success_msg: "Access control groups validation passed"

- name: Validate SSSD configuration
  ansible.builtin.assert:
    that:
      - hx_domain_join_sssd_id_provider in ['ad', 'ldap']
      - hx_domain_join_sssd_auth_provider in ['ad', 'ldap', 'krb5']
      - hx_domain_join_sssd_access_provider in ['ad', 'ldap', 'simple']
      - hx_domain_join_sssd_debug_level | int >= 0
      - hx_domain_join_sssd_debug_level | int <= 10
    fail_msg: "SSSD configuration must be valid"
    success_msg: "SSSD configuration validation passed"
  when: hx_domain_join_use_sssd | default(true)

- name: Validate LDAP settings
  ansible.builtin.assert:
    that:
      - hx_domain_join_ldap_search_base is defined
      - hx_domain_join_ldap_search_base | regex_search('^DC=')
      - hx_domain_join_ldap_min_id | int > 0
      - hx_domain_join_ldap_max_id | int > hx_domain_join_ldap_min_id | int
      - hx_domain_join_ldap_schema in ['ad', 'rfc2307', 'rfc2307bis']
    fail_msg: "LDAP settings must be valid"
    success_msg: "LDAP settings validation passed"

- name: Validate timeout settings
  ansible.builtin.assert:
    that:
      - hx_domain_join_cache_timeout | int > 0
      - hx_domain_join_connectivity_timeout | int > 0
      - hx_domain_join_connectivity_timeout | int <= 60
      - hx_domain_join_session_timeout | int > 0
      - hx_domain_join_idle_timeout | int > 0
    fail_msg: "Timeout settings must be positive integers within reasonable ranges"
    success_msg: "Timeout settings validation passed"

- name: Validate backup settings
  ansible.builtin.assert:
    that:
      - hx_domain_join_backup_retention_days | int > 0
      - hx_domain_join_backup_retention_days | int <= 365
      - hx_domain_join_backup_dir is defined
      - hx_domain_join_backup_dir | length > 0
    fail_msg: "Backup settings must be valid"
    success_msg: "Backup settings validation passed"
  when: hx_domain_join_backup_enabled | default(false)

- name: Validate log level
  ansible.builtin.assert:
    that:
      - hx_domain_join_log_level in ['DEBUG', 'INFO', 'WARN', 'ERROR']
    fail_msg: "Log level must be DEBUG, INFO, WARN, or ERROR"
    success_msg: "Log level validation passed"

- name: Validate compliance mode
  ansible.builtin.assert:
    that:
      - hx_domain_join_compliance_mode in ['standard', 'strict', 'custom']
    fail_msg: "Compliance mode must be standard, strict, or custom"
    success_msg: "Compliance mode validation passed"

- name: Check system compatibility
  ansible.builtin.assert:
    that:
      - ansible_os_family in ['Debian', 'RedHat']
      - ansible_python_version is version('3.6', '>=')
      - ansible_architecture in ['x86_64', 'aarch64']
    fail_msg: "System must be Debian/RedHat family with Python 3.6+ on x86_64/aarch64"
    success_msg: "System compatibility validation passed"

- name: Validate network connectivity to domain controllers
  ansible.builtin.wait_for:
    host: "{{ item }}"
    port: 389  # LDAP port
    timeout: "{{ hx_domain_join_connectivity_timeout }}"
  loop: "{{ hx_domain_join_domain_controllers }}"
  register: dc_connectivity
  failed_when: false

- name: Assert domain controller connectivity
  ansible.builtin.assert:
    that:
      - dc_connectivity.results | selectattr('failed', 'equalto', false) | list | length > 0
    fail_msg: "At least one domain controller must be reachable"
    success_msg: "Domain controller connectivity validation passed"

- name: Check DNS resolution for domain
  ansible.builtin.command:
    cmd: "nslookup {{ hx_domain_join_domain_name }}"
  register: dns_resolution
  changed_when: false
  failed_when: false

- name: Validate DNS resolution
  ansible.builtin.assert:
    that:
      - dns_resolution.rc == 0
    fail_msg: "Domain name must be resolvable via DNS"
    success_msg: "DNS resolution validation passed"

- name: Check for existing domain membership
  ansible.builtin.command:
    cmd: realm list
  register: existing_realm
  changed_when: false
  failed_when: false

- name: Set domain join status fact
  ansible.builtin.set_fact:
    hx_domain_already_joined: "{{ hx_domain_join_domain_name in existing_realm.stdout }}"

- name: Validate home directory template
  ansible.builtin.assert:
    that:
      - hx_domain_join_home_directory_template is defined
      - "'%u' in hx_domain_join_home_directory_template"
      - hx_domain_join_home_directory_template | regex_search('^/')
    fail_msg: "Home directory template must be valid and contain %u placeholder"
    success_msg: "Home directory template validation passed"

- name: Validate notification settings
  ansible.builtin.assert:
    that:
      - hx_domain_join_notification_email | regex_search('@')
      - hx_domain_join_notification_events is defined
      - hx_domain_join_notification_events | length > 0
    fail_msg: "Notification settings must be valid"
    success_msg: "Notification settings validation passed"
  when: hx_domain_join_notifications_enabled | default(false)

- name: Check required system commands
  ansible.builtin.command:
    cmd: "which {{ item }}"
  register: command_check
  changed_when: false
  failed_when: command_check.rc != 0
  loop:
    - systemctl
    - hostnamectl
    - timedatectl
  when: ansible_service_mgr == "systemd"

- name: Log validation completion
  ansible.builtin.debug:
    msg:
      - "Domain join validation completed successfully"
      - "Domain: {{ hx_domain_join_domain_name }}"
      - "Realm: {{ hx_domain_join_realm }}"
      - "Computer Name: {{ hx_domain_join_computer_name }}"
      - "Already Joined: {{ hx_domain_already_joined | default(false) }}"
      - "Domain Controllers: {{ hx_domain_join_domain_controllers | length }}"
      - "SSSD Enabled: {{ hx_domain_join_use_sssd }}"
  when: hx_domain_join_enable_logging | default(true)
