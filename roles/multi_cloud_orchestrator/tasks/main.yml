---
- name: Create multi-cloud orchestrator directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /opt/hx/multi-cloud
    - /opt/hx/ai-models/multi-cloud
    - /var/log/hx-multi-cloud
    - /opt/hx/terraform-modules
    - /opt/hx/cloud-configs

- name: Install multi-cloud dependencies
  pip:
    name:
      - boto3>=1.28.0
      - azure-mgmt-compute>=30.0.0
      - azure-mgmt-storage>=21.0.0
      - google-cloud-compute>=1.14.0
      - google-cloud-storage>=2.10.0
      - terraform-external-data>=0.2.0
      - kubernetes>=27.2.0
      - apache-airflow>=2.7.0
      - scikit-learn>=1.3.0
      - pandas>=2.0.0
    state: present
    virtualenv: /opt/hx/venv

- name: Install Terraform
  unarchive:
    src: "https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: true
    mode: '0755'
    creates: /usr/local/bin/terraform

- name: Deploy multi-cloud orchestrator
  template:
    src: multi_cloud_orchestrator.py.j2
    dest: /opt/hx/multi-cloud/orchestrator.py
    mode: '0755'
  notify: restart multi cloud orchestrator

- name: Deploy workload placement engine
  template:
    src: workload_placement.py.j2
    dest: /opt/hx/multi-cloud/workload_placement.py
    mode: '0755'
  notify: restart multi cloud orchestrator

- name: Deploy cost optimizer
  template:
    src: multi_cloud_cost_optimizer.py.j2
    dest: /opt/hx/multi-cloud/cost_optimizer.py
    mode: '0755'
  notify: restart multi cloud orchestrator

- name: Deploy disaster recovery manager
  template:
    src: disaster_recovery_manager.py.j2
    dest: /opt/hx/multi-cloud/dr_manager.py
    mode: '0755'
  notify: restart multi cloud orchestrator

- name: Create Terraform modules
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  loop:
    - src: aws_infrastructure.tf.j2
      dest: /opt/hx/terraform-modules/aws_infrastructure.tf
    - src: azure_infrastructure.tf.j2
      dest: /opt/hx/terraform-modules/azure_infrastructure.tf
    - src: gcp_infrastructure.tf.j2
      dest: /opt/hx/terraform-modules/gcp_infrastructure.tf
    - src: multi_cloud_variables.tf.j2
      dest: /opt/hx/terraform-modules/variables.tf

- name: Create multi-cloud systemd service
  template:
    src: hx-multi-cloud-orchestrator.service.j2
    dest: /etc/systemd/system/hx-multi-cloud-orchestrator.service
    mode: '0644'
  notify:
    - reload systemd
    - restart multi cloud orchestrator

- name: Deploy configuration files
  template:
    src: multi_cloud_config.yml.j2
    dest: /opt/hx/multi-cloud/config.yml
    mode: '0644'
  notify: restart multi cloud orchestrator

- name: Create cloud provider configuration files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0600'
  loop:
    - src: aws_config.yml.j2
      dest: /opt/hx/cloud-configs/aws.yml
    - src: azure_config.yml.j2
      dest: /opt/hx/cloud-configs/azure.yml
    - src: gcp_config.yml.j2
      dest: /opt/hx/cloud-configs/gcp.yml

- name: Create ML model training script
  template:
    src: train_multi_cloud_models.py.j2
    dest: /opt/hx/multi-cloud/train_models.py
    mode: '0755'

- name: Set up cron job for model training
  cron:
    name: "Multi-cloud model training"
    minute: "0"
    hour: "5"
    job: "/opt/hx/venv/bin/python /opt/hx/multi-cloud/train_models.py"
    user: root

- name: Start and enable multi-cloud orchestrator
  systemd:
    name: hx-multi-cloud-orchestrator
    state: started
    enabled: true
    daemon_reload: true

- name: Verify multi-cloud orchestrator health
  uri:
    url: "http://localhost:8086/health"
    method: GET
    timeout: 10
  register: multi_cloud_health
  retries: 5
  delay: 10
  until: multi_cloud_health.status == 200
