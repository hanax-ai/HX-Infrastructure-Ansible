---

---
# Infrastructure Monitoring
- name: Install monitoring tools
  package:
    name: "{{ item }}"
    state: present
  loop:
    - htop
    - iotop
    - nethogs
    - sysstat
  when: infrastructure_monitoring_enabled | default(true)

- name: Check network connectivity
  shell: |
    ping -c 3 {{ item }} | tail -1 | awk -F'/' '{print $5}'
  register: network_latency
  loop: "{{ network_targets | default(['8.8.8.8', 'google.com']) }}"
  changed_when: false
  failed_when: false

- name: Monitor disk I/O performance
  shell: |
    iostat -x 1 3 | tail -n +4 | awk 'NF && !/^$/ {util+=$NF; count++} END {print util/count}'
  register: disk_io_util
  changed_when: false
  failed_when: false

- name: Check network interface statistics
  shell: |
    cat /proc/net/dev | grep {{ ansible_default_ipv4.interface }} | \
    awk '{print "rx_bytes:" $2 ",tx_bytes:" $10 ",rx_packets:" $3 ",tx_packets:" $11}'
  register: network_stats
  changed_when: false

- name: Monitor memory details
  shell: |
    free -m | awk 'NR==2{printf "total:%s,used:%s,free:%s,shared:%s,cache:%s,available:%s", $2,$3,$4,$5,$6,$7}'
  register: memory_details
  changed_when: false

- name: Check system uptime and load
  shell: |
    uptime | awk -F'up ' '{print $2}' | awk -F',' '{print "uptime:" $1 ",users:" $2}' && \
    cat /proc/loadavg | awk '{print "load_1min:" $1 ",load_5min:" $2 ",load_15min:" $3}'
  register: system_uptime_load
  changed_when: false

- name: Monitor process count and states
  shell: |
    ps aux | awk 'NR>1 {states[substr($8,1,1)]++; total++} END {
      for (state in states) printf "%s:%d,", state, states[state];
      printf "total:%d", total
    }'
  register: process_stats
  changed_when: false

- name: Check filesystem usage details
  shell: |
    df -h | awk 'NR>1 && $6!="/dev" && $6!="/run" {
      gsub(/%/, "", $5);
      printf "%s:size=%s,used=%s,avail=%s,use_pct=%s;", $6, $2, $3, $4, $5
    }'
  register: filesystem_details
  changed_when: false

- name: Create infrastructure monitoring summary
  set_fact:
    infrastructure_metrics:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      hostname: "{{ inventory_hostname }}"
      network:
        latency: "{{ network_latency.results | map(attribute='stdout') | list }}"
        interface_stats: "{{ network_stats.stdout }}"
        connectivity_status: "{{ 'healthy' if network_latency.results | selectattr('rc', 'equalto', 0) | list | length > 0 else 'critical' }}"
      storage:
        disk_io_utilization: "{{ disk_io_util.stdout | default(0) | float }}"
        filesystem_usage: "{{ filesystem_details.stdout }}"
        io_status: "{{ 'healthy' if (disk_io_util.stdout | default(0) | float) < 80 else 'warning' }}"
      memory:
        details: "{{ memory_details.stdout }}"
        status: "healthy"
      system:
        uptime_load: "{{ system_uptime_load.stdout_lines }}"
        process_stats: "{{ process_stats.stdout }}"
        status: "healthy"

- name: Log infrastructure metrics
  copy:
    content: "{{ infrastructure_metrics | to_nice_json }}"
    dest: "/var/log/hx-infrastructure/infrastructure-metrics-{{ ansible_date_time.epoch }}.json"
  when: log_infrastructure_metrics | default(true)

- name: Check infrastructure health thresholds
  set_fact:
    infrastructure_alerts: []

- name: Add disk I/O alert
  set_fact:
    infrastructure_alerts: "{{ infrastructure_alerts + ['high_disk_io'] }}"
  when: (disk_io_util.stdout | default(0) | float) > 80

- name: Add network connectivity alert
  set_fact:
    infrastructure_alerts: "{{ infrastructure_alerts + ['network_connectivity'] }}"
  when: network_latency.results | selectattr('rc', 'equalto', 0) | list | length == 0

- name: Send infrastructure alerts
  include_tasks: trigger_alert.yml
  vars:
    alert_type: "infrastructure_monitoring"
    alert_message: "Infrastructure monitoring alerts: {{ infrastructure_alerts | join(', ') }}"
    alert_data: "{{ infrastructure_metrics }}"
  when:
    - infrastructure_alerts | length > 0
    - alerting_enabled | default(true)
