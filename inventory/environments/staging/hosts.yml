---
# HX Infrastructure - Staging Environment Inventory
# Following Ansible inventory best practices: https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html

# =============================================================================
# LOAD BALANCERS
# =============================================================================
load_balancers:
  hosts:
    hx-stg-lb-01:
      ansible_host: 10.2.1.10
      ansible_user: ubuntu
      server_role: primary
      keepalived_priority: 100
    hx-stg-lb-02:
      ansible_host: 10.2.1.11
      ansible_user: ubuntu
      server_role: backup
      keepalived_priority: 90
  vars:
    environment: staging
    tier: load_balancer
    subnet: "{{ network.zones.dmz.subnets.load_balancer }}"

# =============================================================================
# WEB SERVERS
# =============================================================================
web_servers:
  hosts:
    hx-stg-web-01:
      ansible_host: 10.2.2.10
      ansible_user: ubuntu
      server_role: primary
    hx-stg-web-02:
      ansible_host: 10.2.2.11
      ansible_user: ubuntu
      server_role: secondary
    hx-stg-web-03:
      ansible_host: 10.2.2.12
      ansible_user: ubuntu
      server_role: tertiary
  vars:
    environment: staging
    tier: web
    subnet: "{{ network.zones.dmz.subnets.web }}"

# =============================================================================
# APPLICATION SERVERS
# =============================================================================
application_servers:
  hosts:
    hx-stg-app-01:
      ansible_host: 10.2.3.10
      ansible_user: ubuntu
      server_role: primary
    hx-stg-app-02:
      ansible_host: 10.2.3.11
      ansible_user: ubuntu
      server_role: secondary
    hx-stg-app-03:
      ansible_host: 10.2.3.12
      ansible_user: ubuntu
      server_role: tertiary
  vars:
    environment: staging
    tier: application
    subnet: "{{ network.zones.private.subnets.application }}"

# =============================================================================
# DATABASE SERVERS
# =============================================================================
database_servers:
  hosts:
    hx-stg-db-01:
      ansible_host: 10.2.4.10
      ansible_user: ubuntu
      server_role: master
      postgresql_role: primary
    hx-stg-db-02:
      ansible_host: 10.2.4.11
      ansible_user: ubuntu
      server_role: replica
      postgresql_role: standby
    hx-stg-db-03:
      ansible_host: 10.2.4.12
      ansible_user: ubuntu
      server_role: replica
      postgresql_role: standby
  vars:
    environment: staging
    tier: database
    subnet: "{{ network.zones.private.subnets.database }}"

# =============================================================================
# CACHE SERVERS
# =============================================================================
cache_servers:
  hosts:
    hx-stg-cache-01:
      ansible_host: 10.2.5.10
      ansible_user: ubuntu
      server_role: master
      redis_role: primary
    hx-stg-cache-02:
      ansible_host: 10.2.5.11
      ansible_user: ubuntu
      server_role: replica
      redis_role: standby
  vars:
    environment: staging
    tier: cache
    subnet: "{{ network.zones.private.subnets.cache }}"

# =============================================================================
# MONITORING SERVERS
# =============================================================================
monitoring_servers:
  hosts:
    hx-stg-monitor-01:
      ansible_host: 10.2.6.10
      ansible_user: ubuntu
      server_role: primary
      services:
        - prometheus
        - grafana
        - alertmanager
    hx-stg-monitor-02:
      ansible_host: 10.2.6.11
      ansible_user: ubuntu
      server_role: secondary
      services:
        - elasticsearch
        - kibana
        - logstash
  vars:
    environment: staging
    tier: monitoring
    subnet: "{{ network.zones.private.subnets.monitoring }}"

# =============================================================================
# GROUP DEFINITIONS
# =============================================================================
# DMZ Zone (Internet-facing)
dmz:
  children:
    load_balancers:
    web_servers:
  vars:
    zone: dmz
    internet_facing: true
    firewall_rules:
      - port: 80
        protocol: tcp
        source: "0.0.0.0/0"
      - port: 443
        protocol: tcp
        source: "0.0.0.0/0"

# Private Zone (Internal services)
private:
  children:
    application_servers:
    database_servers:
    cache_servers:
    monitoring_servers:
  vars:
    zone: private
    internet_facing: false
    firewall_rules:
      - port: 22
        protocol: tcp
        source: "{{ network.zones.management.subnets.admin }}"

# All Staging Servers
staging:
  children:
    dmz:
    private:
  vars:
    environment: staging
    deployment_type: staging
    debug_mode: false
    log_level: info
    ssl_verification: true
    backup_enabled: true
    monitoring_level: enhanced
    resource_limits:
      cpu: "4"
      memory: "8G"
      disk: "100G"

# Service-based groupings
postgresql:
  children:
    database_servers:
  vars:
    postgresql_version: "{{ versions.database.postgresql }}"
    postgresql_port: "{{ ports.database.postgresql }}"
    postgresql_max_connections: 200
    postgresql_shared_buffers: "256MB"

redis:
  children:
    cache_servers:
  vars:
    redis_version: "{{ versions.cache.redis }}"
    redis_port: "{{ ports.cache.redis }}"
    redis_maxmemory: "2gb"
    redis_maxmemory_policy: "allkeys-lru"

nginx:
  children:
    load_balancers:
    web_servers:
  vars:
    nginx_version: "{{ versions.web.nginx }}"
    nginx_worker_processes: 4
    nginx_worker_connections: 1024

# All servers in staging environment
all:
  children:
    staging:
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_python_interpreter: /usr/bin/python3
