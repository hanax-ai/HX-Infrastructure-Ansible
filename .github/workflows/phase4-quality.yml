name: Phase 4 - Quality & Standards Pipeline

on:
  push:
    branches: [ main, master, phase3/core-reliability, phase4/quality-standards ]
  pull_request:
    branches: [ main, master ]

env:
  ANSIBLE_FORCE_COLOR: true
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  lint-and-format:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install ansible-lint yamllint bandit pre-commit

      - name: Run YAML Lint
        run: yamllint . --format github
        continue-on-error: true

      - name: Run Ansible Lint
        run: ansible-lint --format github .
        continue-on-error: true

      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files
        continue-on-error: true

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov testinfra ansible-runner coverage

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=roles --cov-report=xml --cov-report=html
          coverage report --show-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and dependencies
        run: |
          pip install ansible testinfra molecule[docker]

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v
          ansible-playbook --syntax-check --inventory inventories/dev/hosts.yml site.yml

      - name: Run Molecule tests
        run: |
          cd roles/hx_ca_trust_standardized && molecule test
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o reports/bandit-report.json
          bandit -r . -f txt
        continue-on-error: true

      - name: Run security tests
        run: |
          pytest tests/security/ -v
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install performance tools
        run: |
          pip install pytest psutil

      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v
          python scripts/quality/generate_performance_report.py

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: reports/

  chaos-engineering:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install chaos testing tools
        run: |
          pip install pytest

      - name: Run chaos engineering tests
        run: |
          pytest tests/chaos/ -v
        continue-on-error: true

  documentation:
    name: Documentation Generation
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install documentation tools
        run: |
          pip install mkdocs mkdocs-material mkdocstrings[python]

      - name: Build documentation
        run: |
          cd docs_site
          mkdocs build --strict

      - name: Deploy documentation
        if: github.ref == 'refs/heads/main'
        run: |
          cd docs_site
          mkdocs gh-deploy --force

  quality-gate:
    name: Quality Gate Assessment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan, performance-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate quality report
        run: |
          python scripts/quality/quality_gate.py
          cat reports/quality_assessment.json

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: reports/

      - name: Quality Gate Check
        run: |
          python scripts/quality/quality_gate.py --enforce
