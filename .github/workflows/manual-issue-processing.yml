_# .github/workflows/manual-issue-processing.yml
name: Manual Issue Processing & Testing

on:
  workflow_dispatch:
    inputs:
      process_type:
        description: 'Type of processing to run'
        required: true
        default: 'sprint4_batch'
        type: choice
        options:
        - sprint4_batch
        - security_audit
        - full_pipeline_test
      batch_size:
        description: 'Number of issues to process'
        required: false
        default: '25'
        type: string
      dry_run:
        description: 'Run in dry-run mode (no actual changes)'
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.HX_COMMIT_TOKEN }}
  PYTHON_VERSION: '3.11'

permissions:
  contents: read

jobs:
  manual-processing:
    name: Manual Issue Processing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      issues: write
    environment: remediation-prod

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests==2.31.0 PyGithub==1.59.1 pyyaml==6.0.1
        pip install scikit-learn==1.3.2 numpy==1.24.4
        pip install aiohttp==3.8.6 flask==2.3.3

    - name: Authenticate GitHub CLI
      shell: bash
      run: |
        gh auth status

    - name: Validate Sprint 4 Issues
      run: |
        echo "🔍 Validating Sprint 4 classified issues..."
        if [ -f "sprint4_classified_issues.json" ]; then
          echo "✅ Found $(jq '. | length' sprint4_classified_issues.json) classified issues"
          echo "Sample issue categories:"
          jq -r '.[0:5] | .[] | "\(.classification.category): \(.classification.severity)"' sprint4_classified_issues.json
        else
          echo "❌ sprint4_classified_issues.json not found"
          exit 1
        fi

    - name: Process Issues Batch
      run: |
        echo "🚀 Processing ${{ github.event.inputs.batch_size }} issues..."
        echo "Process type: ${{ github.event.inputs.process_type }}"
        echo "Dry run: ${{ github.event.inputs.dry_run }}"

        # Create batch file
        jq ".[0:${{ github.event.inputs.batch_size }}]" sprint4_classified_issues.json > manual_batch.json

        echo "Created batch with $(jq '. | length' manual_batch.json) issues"

        # Run processing based on type
        case "${{ github.event.inputs.process_type }}" in
          "sprint4_batch")
            echo "Running Sprint 4 batch processing..."
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              python3 scripts/automation/cursor/cursor_ai_engine.py \
                --issues-file manual_batch.json \
                --config-file scripts/automation/config/cursor_config.yml \
                --output-file manual_results.json \
                --dry-run
            else
              python3 scripts/automation/cursor/cursor_ai_engine.py \
                --issues-file manual_batch.json \
                --config-file scripts/automation/config/cursor_config.yml \
                --output-file manual_results.json
            fi
            ;;
          "security_audit")
            echo "Running security audit..."
            python3 security/validation/security_scan.py
            ;;
          "full_pipeline_test")
            echo "Running full pipeline test..."
            python3 scripts/automation/classification/ai_classifier.py \
              --input-file manual_batch.json \
              --output-file manual_classified.json
            ;;
        esac

    - name: Generate Results Summary
      run: |
        echo "📊 MANUAL PROCESSING RESULTS:"
        echo "================================"

        if [ -f "manual_results.json" ]; then
          echo "✅ Processing completed successfully"
          echo "Results file size: $(wc -c < manual_results.json) bytes"

          # Extract key metrics
          if command -v jq >/dev/null 2>&1; then
            echo "Processing summary:"
            jq -r 'if type == "array" then "Total items: \(length)" else "Result type: \(type)" end' manual_results.json 2>/dev/null || echo "Custom result format"
          fi
        else
          echo "❌ No results file generated"
        fi

        echo ""
        echo "Batch processing details:"
        echo "- Input batch size: ${{ github.event.inputs.batch_size }}"
        echo "- Process type: ${{ github.event.inputs.process_type }}"
        echo "- Dry run mode: ${{ github.event.inputs.dry_run }}"
        echo "- Timestamp: $(date)"

    - name: Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: manual-processing-results-${{ github.run_number }}
        path: |
          manual_*.json
          *.log
        retention-days: 30

    - name: Create Issue Summary (if not dry-run)
      if: github.event.inputs.dry_run == 'false' && github.event.inputs.process_type == 'sprint4_batch'
      run: |
        echo "📋 Creating GitHub issue with processing summary..."

        # Create issue body
        cat > issue_body.md << 'EOF'
        ## Manual Issue Processing Results

        **Processing Details:**
        - Batch Size: ${{ github.event.inputs.batch_size }}
        - Process Type: ${{ github.event.inputs.process_type }}
        - Timestamp: $(date)
        - Workflow Run: ${{ github.run_number }}

        **Results:**
        - Processing completed successfully
        - Results available in workflow artifacts

        **Next Steps:**
        - Review processing results
        - Validate automated fixes
        - Continue with remaining batches
        EOF

        # Create GitHub issue using gh CLI
        gh issue create \
          --title "Manual Processing Results - Batch ${{ github.run_number }}" \
          --body-file issue_body.md \
          --label "automation,sprint4,manual-processing"

  workflow-health-check:
    name: Workflow Health Check
    runs-on: ubuntu-latest
    needs: manual-processing
    timeout-minutes: 15
    if: always()

    steps:
    - name: Check Processing Health
      run: |
        echo "🏥 WORKFLOW HEALTH CHECK:"
        echo "========================="

        if [ "${{ needs.manual-processing.result }}" = "success" ]; then
          echo "✅ Manual processing completed successfully"
          echo "🎯 Automation pipeline is operational"
        else
          echo "❌ Manual processing failed"
          echo "🔧 Requires immediate attention"
        fi

        echo ""
        echo "System Status:"
        echo "- Workflow triggers: ✅ Manual dispatch working"
        echo "- Dependencies: ✅ Python packages installed"
        echo "- Issue processing: ${{ needs.manual-processing.result }}"
        echo "- GitHub API access: ✅ Token configured"

        echo ""
        echo "📋 Recommendations:"
        if [ "${{ needs.manual-processing.result }}" = "success" ]; then
          echo "- ✅ System ready for automated processing"
          echo "- 🚀 Can proceed with Phase 2 optimization"
          echo "- 📊 Monitor results and scale up batch sizes"
        else
          echo "- 🔧 Debug processing failures"
          echo "- 📋 Check dependency installation"
          echo "- 🔍 Review configuration files"
        fi

