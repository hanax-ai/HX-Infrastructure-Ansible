---
name: HX Infrastructure Ansible CI/CD

on:
  push:
    branches: [ main, phase-*, develop ]
  pull_request:
    branches: [ main, phase-* ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  ANSIBLE_VERSION: ">=2.12.0,<2.16.0"
  PYTHON_VERSION: "3.9"

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        ansible-galaxy install -r requirements.yml

    - name: Run YAML lint
      run: |
        yamllint .
        echo "✅ YAML linting passed"

    - name: Run Ansible lint
      run: |
        ansible-lint --config=.ansible-lint
        echo "✅ Ansible linting passed"

    - name: Validate inventory files
      run: |
        for env in development staging production; do
          if [ -f "inventory/environments/$env/hosts.yml" ]; then
            echo "Validating $env inventory..."
            ansible-inventory -i inventory/environments/$env --list > /dev/null
            echo "✅ $env inventory is valid"
          fi
        done

    - name: Validate playbook syntax
      run: |
        for playbook in playbooks/**/*.yml; do
          if [ -f "$playbook" ]; then
            echo "Validating $playbook..."
            ansible-playbook --syntax-check "$playbook"
            echo "✅ $playbook syntax is valid"
          fi
        done

    - name: Check role structure
      run: |
        for role in roles/*/; do
          role_name=$(basename "$role")
          echo "Checking role: $role_name"
          
          # Check for required directories
          for dir in tasks defaults; do
            if [ ! -d "$role/$dir" ]; then
              echo "❌ Missing required directory: $role/$dir"
              exit 1
            fi
          done
          
          # Check for main.yml files
          for file in tasks/main.yml defaults/main.yml; do
            if [ ! -f "$role/$file" ]; then
              echo "❌ Missing required file: $role/$file"
              exit 1
            fi
          done
          
          echo "✅ Role $role_name structure is valid"
        done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install detect-secrets safety bandit

    - name: Run secret detection
      run: |
        detect-secrets scan --baseline .secrets.baseline
        echo "✅ Secret scanning completed"

    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check -r requirements-dev.txt
        echo "✅ Dependency security check passed"

    - name: Run security configuration checks
      run: |
        echo "Checking security configurations..."
        
        # Check host_key_checking is enabled
        if grep -q "host_key_checking = True" ansible.cfg; then
          echo "✅ Host key checking is enabled"
        else
          echo "❌ CRITICAL: Host key checking is disabled!"
          exit 1
        fi
        
        # Check SECURITY.md exists
        if [ -f "SECURITY.md" ]; then
          echo "✅ SECURITY.md exists"
        else
          echo "❌ CRITICAL: SECURITY.md is missing!"
          exit 1
        fi
        
        # Check vault files are in .gitignore
        if grep -q "vault" .gitignore; then
          echo "✅ Vault files are in .gitignore"
        else
          echo "❌ WARNING: Vault files may not be properly excluded"
        fi

    - name: Validate security role configurations
      run: |
        echo "Validating security role configurations..."
        
        # Check for security hardening defaults
        if [ -f "roles/security/defaults/main.yml" ]; then
          if grep -q "hx_security_" roles/security/defaults/main.yml; then
            echo "✅ Security role uses hx_ prefixed variables"
          else
            echo "❌ Security role variables should use hx_ prefix"
            exit 1
          fi
        fi

  test-roles:
    name: Test Roles
    runs-on: ubuntu-latest
    strategy:
      matrix:
        role: [common, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        ansible-galaxy install -r requirements.yml

    - name: Test role syntax
      run: |
        echo "Testing role: ${{ matrix.role }}"
        ansible-playbook --syntax-check playbooks/test-role.yml -e target_role=${{ matrix.role }}
        echo "✅ Role ${{ matrix.role }} syntax is valid"

    - name: Run role in check mode
      run: |
        echo "Running role ${{ matrix.role }} in check mode..."
        # Create a minimal inventory for testing
        echo "localhost ansible_connection=local" > test_inventory
        ansible-playbook --check --diff -i test_inventory playbooks/test-role.yml -e target_role=${{ matrix.role }}
        echo "✅ Role ${{ matrix.role }} check mode passed"

  validate-makefile:
    name: Validate Makefile
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Makefile targets
      run: |
        echo "Testing Makefile targets..."
        
        # Test help target
        make help
        echo "✅ Makefile help target works"
        
        # Test lint target (if exists)
        if grep -q "^lint:" Makefile; then
          make lint || echo "⚠️ Lint target failed (may be expected in CI)"
        fi
        
        # Validate safety-check target exists
        if grep -q "^safety-check:" Makefile; then
          echo "✅ safety-check target exists"
        else
          echo "❌ safety-check target is missing from Makefile"
          exit 1
        fi

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "Checking documentation..."
        
        # Check for required documentation files
        required_docs=("README.md" "SECURITY.md" "CODEOWNERS")
        for doc in "${required_docs[@]}"; do
          if [ -f "$doc" ] || [ -f ".github/$doc" ]; then
            echo "✅ $doc exists"
          else
            echo "❌ Required documentation file missing: $doc"
            exit 1
          fi
        done
        
        # Check for role documentation
        for role in roles/*/; do
          role_name=$(basename "$role")
          if [ -f "$role/README.md" ]; then
            echo "✅ Role $role_name has documentation"
          else
            echo "⚠️ Role $role_name missing README.md"
          fi
        done

    - name: Validate markdown files
      run: |
        # Install markdownlint if available
        if command -v markdownlint >/dev/null 2>&1; then
          markdownlint *.md
          echo "✅ Markdown files are valid"
        else
          echo "⚠️ markdownlint not available, skipping markdown validation"
        fi

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        ansible-galaxy install -r requirements.yml

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Create test inventory
        cat > test_inventory << EOF
        [all]
        localhost ansible_connection=local
        
        [control_nodes]
        localhost
        
        [llm_servers]
        localhost
        EOF
        
        # Test main playbook syntax
        ansible-playbook --syntax-check -i test_inventory playbooks/site/main.yml
        echo "✅ Main playbook syntax is valid"
        
        # Test in check mode
        ansible-playbook --check --diff -i test_inventory playbooks/site/main.yml
        echo "✅ Integration test completed"

  security-baseline:
    name: Security Baseline Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run comprehensive security audit
      run: |
        echo "Running comprehensive security audit..."
        
        # Check for hardcoded secrets
        echo "Checking for potential secrets..."
        grep -r -i "password\|secret\|key\|token" --include="*.yml" --include="*.yaml" . | grep -v "template\|example\|REPLACE" || echo "No hardcoded secrets found"
        
        # Check security configurations
        echo "Validating security configurations..."
        
        # Verify security defaults
        security_checks=(
          "host_key_checking = True:ansible.cfg"
          "hx_security_:roles/security/defaults/main.yml"
          "vault:\.gitignore"
        )
        
        for check in "${security_checks[@]}"; do
          pattern="${check%:*}"
          file="${check#*:}"
          if grep -q "$pattern" "$file" 2>/dev/null; then
            echo "✅ Security check passed: $pattern in $file"
          else
            echo "❌ Security check failed: $pattern not found in $file"
          fi
        done

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan, test-roles, validate-makefile, documentation-check]
    if: always()
    
    steps:
    - name: Determine overall status
      run: |
        if [[ "${{ needs.lint-and-validate.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.test-roles.result }}" == "success" && 
              "${{ needs.validate-makefile.result }}" == "success" && 
              "${{ needs.documentation-check.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          echo "STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some CI checks failed!"
          echo "STATUS=failure" >> $GITHUB_ENV
        fi

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const status = process.env.STATUS;
          const message = status === 'success' 
            ? '✅ **HX Infrastructure CI/CD**: All checks passed! This PR is ready for review.'
            : '❌ **HX Infrastructure CI/CD**: Some checks failed. Please review the failed jobs and fix the issues.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
