---
# Save this file as .github/workflows/ci.yml
# This file needs to be added manually due to GitHub App workflow permissions

name: Phase 2C CI Pipeline

on:
  push:
    branches: [ main, develop, 'phase-*', 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  ANSIBLE_HOST_KEY_CHECKING: false
  ANSIBLE_STDOUT_CALLBACK: yaml

jobs:
  # Phase 2C Machine-Checkable Gates
  integration-gate:
    name: Integration Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Run Integration Gate
        run: scripts/ci/integration-gate.sh

  performance-gate:
    name: Performance Gate
    runs-on: ubuntu-latest
    needs: integration-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml
          sudo apt-get update && sudo apt-get install -y bc

      - name: Run Performance Gate
        run: make gate-performance

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark_results/

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: integration-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Run Security Gate
        run: make gate-security

  # Golden Path Integration Tests
  golden-path-tests:
    name: Golden Path Tests
    runs-on: ubuntu-latest
    needs: [integration-gate, performance-gate, security-gate]
    strategy:
      matrix:
        test: [blue_green, monitoring, self_healing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml
          sudo apt-get update && sudo apt-get install -y bc jq

      - name: Run Golden Path Test - ${{ matrix.test }}
        run: |
          chmod +x tests/golden_path/${{ matrix.test }}.sh
          ./tests/golden_path/${{ matrix.test }}.sh

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: golden-path-${{ matrix.test }}-results
          path: tests/golden_path/results/

  # Traditional CI Jobs (Enhanced)
  lint-and-syntax:
    name: Lint and Syntax Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Run YAML Lint
        run: yamllint .

      - name: Run Ansible Lint
        run: ansible-lint

      - name: Run Syntax Check
        run: |
          export ANSIBLE_CONFIG=infrastructure/ansible/ansible.cfg
          ansible-playbook --syntax-check -i infrastructure/ansible/inventories/dev/hosts.yml infrastructure/ansible/playbooks/site.yml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Benchmarking
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml
          sudo apt-get update && sudo apt-get install -y bc jq

      - name: Run Performance Benchmark
        run: make benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmark
          path: benchmark_results/

  # Monitoring Validation
  monitoring-validation:
    name: Monitoring Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Monitoring Validation
        run: scripts/ci/validate-monitoring.sh

  # Documentation Validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Documentation Validation
        run: scripts/ci/validate-docs.sh

  # Phase 2C Completion Gate
  phase2c-gate:
    name: Phase 2C Completion Gate
    runs-on: ubuntu-latest
    needs: [integration-gate, performance-gate, security-gate, golden-path-tests, lint-and-syntax, security-scan, monitoring-validation, docs-validation]
    if: always()
    steps:
      - name: Check all gates passed
        run: |
          if [[ "${{ needs.integration-gate.result }}" == "success" && 
                "${{ needs.performance-gate.result }}" == "success" && 
                "${{ needs.security-gate.result }}" == "success" && 
                "${{ needs.golden-path-tests.result }}" == "success" && 
                "${{ needs.lint-and-syntax.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.monitoring-validation.result }}" == "success" && 
                "${{ needs.docs-validation.result }}" == "success" ]]; then
            echo "🎉 All Phase 2C gates passed!"
            echo "Ready for production deployment"
          else
            echo "❌ One or more Phase 2C gates failed"
            echo "Please review and fix issues before proceeding"
            exit 1
          fi

      - name: Generate gate report
        if: always()
        run: |
          echo "# Phase 2C Gate Report" > gate-report.md
          echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> gate-report.md
          echo "" >> gate-report.md
          echo "## Gate Results" >> gate-report.md
          echo "- Integration Gate: ${{ needs.integration-gate.result }}" >> gate-report.md
          echo "- Performance Gate: ${{ needs.performance-gate.result }}" >> gate-report.md
          echo "- Security Gate: ${{ needs.security-gate.result }}" >> gate-report.md
          echo "- Golden Path Tests: ${{ needs.golden-path-tests.result }}" >> gate-report.md
          echo "- Lint and Syntax: ${{ needs.lint-and-syntax.result }}" >> gate-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> gate-report.md
          echo "- Monitoring Validation: ${{ needs.monitoring-validation.result }}" >> gate-report.md
          echo "- Documentation Validation: ${{ needs.docs-validation.result }}" >> gate-report.md

      - name: Upload gate report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase2c-gate-report
          path: gate-report.md
