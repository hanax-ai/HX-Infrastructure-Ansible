
name: HX Infrastructure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 0'

env:
  ANSIBLE_VERSION: '2.15.0'
  PYTHON_VERSION: '3.9'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install ansible-lint yamllint flake8 black isort

      - name: Run ansible-lint
        run: |
          ansible-lint playbooks/ roles/
        continue-on-error: false

      - name: Run yamllint
        run: |
          yamllint .
        continue-on-error: false

      - name: Run flake8 on Python files
        run: |
          flake8 tests/ scripts/ --max-line-length=88
        continue-on-error: false

      - name: Check Python code formatting
        run: |
          black --check tests/ scripts/
          isort --check-only tests/ scripts/

  # Syntax and Validation
  syntax:
    name: Syntax Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Install Galaxy dependencies
        run: |
          ansible-galaxy install -r requirements.yml

      - name: Validate playbook syntax
        run: |
          find playbooks -name "*.yml" -exec ansible-playbook --syntax-check {} \;

      - name: Validate inventory
        run: |
          ansible-inventory -i inventory/environments/production --list > /dev/null

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Molecule Testing
  molecule:
    name: Molecule Tests
    runs-on: ubuntu-latest
    needs: [lint, syntax]
    strategy:
      matrix:
        role: [common, web, database, monitoring]
        scenario: [default]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install molecule[docker] testinfra ansible==${{ env.ANSIBLE_VERSION }}

      - name: Run Molecule tests
        run: |
          cd roles/${{ matrix.role }}
          molecule test -s ${{ matrix.scenario }}
        env:
          MOLECULE_NO_LOG: false

  # Integration Testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: molecule
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Run integration tests
        run: |
          # Run integration test playbook
          ansible-playbook -i tests/integration/inventory tests/integration/test-integration.yml

  # Documentation Build
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Deploy documentation (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          mkdocs gh-deploy --force

  # Deployment to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [syntax, security, molecule]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Deploy to development
        run: |
          # This would be replaced with actual deployment commands
          echo "Deploying to development environment"
          # ansible-playbook -i inventory/environments/development playbooks/site/main.yml
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration, deploy-dev]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # ansible-playbook -i inventory/environments/staging playbooks/site/main.yml
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging"
          # Add smoke test commands here

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # ansible-playbook -i inventory/environments/production playbooks/site/main.yml
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

      - name: Post-deployment validation
        run: |
          echo "Running post-deployment validation"
          # Add validation commands here

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback"
          # Add rollback logic here

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, syntax, security, molecule, integration, docs]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.lint.result == 'success' && needs.syntax.result == 'success' && needs.security.result == 'success' && needs.molecule.result == 'success' }}
        run: |
          echo "All checks passed successfully!"
          # Add success notification logic

      - name: Notify on failure
        if: ${{ needs.lint.result == 'failure' || needs.syntax.result == 'failure' || needs.security.result == 'failure' || needs.molecule.result == 'failure' }}
        run: |
          echo "Some checks failed. Please review the results."
          # Add failure notification logic
