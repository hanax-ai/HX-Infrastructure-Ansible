# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # REQUIRED GATES - Match branch protection rules exactly
  # ============================================================================
  ansible-lint:
    name: "ansible-lint"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Set up Python 3.9"
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: "Install ansible-lint"
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint

      - name: "Run ansible-lint"
        run: ansible-lint .

  yamllint:
    name: "yamllint"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Set up Python 3.9"
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: "Install yamllint"
        run: |
          python -m pip install --upgrade pip
          pip install yamllint

      - name: "Run yamllint"
        run: yamllint .

  syntax-check:
    name: "syntax-check"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Set up Python 3.9"
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: "Install Ansible"
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: "Syntax check main playbooks"
        run: |
          ansible-playbook site.yml --syntax-check
          ansible-playbook playbooks/deployment.yml --syntax-check || true
          ansible-playbook playbooks/health_check.yml --syntax-check || true

  gate-integration:
    name: "gate-integration"
    runs-on: ubuntu-latest
    needs: [ansible-lint, yamllint, syntax-check]
    timeout-minutes: 30
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Set up Python 3.9"
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: "Install Ansible"
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: "Integration Test - Dry Run"
        run: |
          # Test that inventories are valid
          ansible-inventory -i inventories/dev --list > /dev/null
          ansible-inventory -i inventories/test --list > /dev/null || true
          ansible-inventory -i inventories/prod --list > /dev/null || true

  gate-performance:
    name: "gate-performance"
    runs-on: ubuntu-latest
    needs: [ansible-lint, yamllint, syntax-check]
    timeout-minutes: 20
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Performance Gate Checks"
        run: |
          # Validate playbook complexity and performance
          echo "Checking playbook size and complexity..."
          find playbooks/ -name "*.yml" -exec wc -l {} \; | awk '{if($1>500) print "WARNING: Large playbook " $2 " (" $1 " lines)"}'
          
          # Check for performance anti-patterns
          echo "Checking for performance anti-patterns..."
          grep -r "with_items" playbooks/ || echo "No with_items found (good)"
          grep -r "register:" playbooks/ | wc -l | awk '{if($1>50) print "WARNING: High register usage (" $1 " instances)"}'

  gate-security:
    name: "gate-security"  
    runs-on: ubuntu-latest
    needs: [ansible-lint, yamllint, syntax-check]
    timeout-minutes: 25
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Security Gate Checks"
        run: |
          # Check for security issues
          echo "Checking for hardcoded secrets..."
          grep -r -i "password\s*:" . --include="*.yml" --include="*.yaml" | grep -v "{{" | grep -v vault || echo "No hardcoded passwords found"
          
          echo "Checking for insecure configurations..."
          grep -r "become_method.*su" . --include="*.yml" --include="*.yaml" || echo "No insecure su usage found"
          
          echo "Validating vault file security..."
          find . -name "*vault*" -type f | head -5
