
name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * *'  # Daily security scan at 3 AM UTC

env:
  PYTHON_VERSION: '3.11'

jobs:
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  infrastructure-scan:
    name: Infrastructure as Code Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: ansible
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run KICS for Ansible
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          fail_on: high
          output_formats: 'json,sarif'
          output_path: 'kics-results'
          platform_type: 'ansible'
          exclude_paths: '.git,molecule'

      - name: Upload KICS scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'kics-results/results.sarif'

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-results.json || true
          safety check --short-report

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-results.json || true
          pip-audit --desc

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-results.json
            pip-audit-results.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test container
        run: |
          docker build -t ansible-test:latest -f tests/Dockerfile .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ansible-test:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Run Grype container scan
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'ansible-test:latest'
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: grype-scan-results
          path: ${{ steps.grype-scan.outputs.sarif }}

  compliance-check:
    name: Compliance and Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install compliance tools
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint yamllint
          pip install policy-as-code

      - name: Run compliance checks
        run: |
          # CIS Benchmarks check
          ansible-lint --profile=production
          
          # Custom policy checks
          python scripts/compliance/policy_check.py

      - name: Generate compliance report
        run: |
          python scripts/compliance/generate_report.py > compliance-report.json

      - name: Upload compliance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-results
          path: compliance-report.json

  security-report:
    name: Security Report Generation
    runs-on: ubuntu-latest
    needs: [secrets-scan, infrastructure-scan, dependency-scan, container-scan, compliance-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install report dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 markdown

      - name: Generate security report
        run: |
          python scripts/security/generate_security_report.py

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: |
            security-report.html
            security-report.json

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  security-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: security-report
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security report
        uses: actions/download-artifact@v3
        with:
          name: security-report

      - name: Evaluate security gate
        run: |
          python scripts/security/security_gate.py
        env:
          MAX_CRITICAL_VULNERABILITIES: 0
          MAX_HIGH_VULNERABILITIES: 5
          MAX_MEDIUM_VULNERABILITIES: 20

      - name: Security Gate Status
        run: |
          if [ -f security-gate-passed ]; then
            echo "✅ Security gate passed"
            exit 0
          else
            echo "❌ Security gate failed - blocking deployment"
            exit 1
          fi

